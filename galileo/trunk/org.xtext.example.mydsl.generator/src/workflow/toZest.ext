import myDsl;
import graphmm35;

extension org::openarchitectureware::vis::graphmmlib;
  
create GraphCollection top( Model r ):
	graphs.add( r.toGraph() ) ->
	this;
 
create Graph toGraph(Model m):
	setName( "entities" ) ->
	nodes.addAll( m.entities().toNode() ) ->
	nodes.addAll( m.entities().simpleProperties().toNode() ) ->
	edges.addAll( m.entities().simpleProperties().toPropEdge() ) ->
	edges.addAll( m.entities().refs().toRefEdge() ) ->
	edges.addAll( m.entities().select(e|e.extends != null).toInheritanceEdge() );
   
create ComplexDirectedEdge toInheritanceEdge( Entity e ):
	setSource( e.toNode() ) ->
	setTarget( e.extends.toNode() ) ->
	setLabel( "extends" ) ->
	setWidth( 2 ) ->
	setInheritance(true);   
   
create SimpleDirectedEdge toPropEdge( Property p ):
	setSource( ((Entity)p.eContainer).toNode() ) ->
	setTarget( p.toNode() ) ->
	setStyle( LineStyleEnum::dotted ) ->
	setWeight( 2 );   
   
create SimpleDirectedEdge toRefEdge( Property p ):
	setSource( ((Entity)p.eContainer).toNode() ) ->
	setTarget( ((Entity)p.type).toNode() ) ->
	setStyle( LineStyleEnum::dotted );   
   
  
   
create SimpleNode toNode( Entity e ):  
	setSourceLocation( e.getTMFXtextLocation() ) ->  
	setLabel( e.name ) ->
	setName( e.name ) ->
	setCategory("component");   

   
/* THIS IS THE EXAMPLE USING A COMPARTMENT NODE
create CompartmentNode toNode( Entity e ):  
	setSourceLocation( e.getTMFXtextLocation() ) ->  
	setLabel( e.name ) ->
	setName( e.name ) ->
	setCategory("component") ->
	compartments.add( e.createAttrCompartment() );
	
create Compartment createAttrCompartment( Entity e ):
 	setName( e.name+"attrcomp" ) ->
	setCategory( "properties-compartment" ) ->
	entries.addAll( e.simpleProperties().name );
*/
   
   
/* THIS IS THE EXAMPLE USING SUBGRAPHS FOR ATTRIBUTES
create ContainerNode toNode( Entity e ):  
	setSourceLocation( e.getTMFXtextLocation() ) ->  
	setLabel( e.name ) ->
	setName( e.name ) ->
	setCategory("component") ->
	setFillcolor( ColorEnum::white ) ->
	setContainedGraph( e.createPropsGraph() );
	
create Graph createPropsGraph( Entity e ):
	setName( "childgraph_"+e.name ) ->
	nodes.addAll( e.simpleProperties().toChildProp() );
	
create SimpleNode toChildProp( Property p ):  
	setSourceLocation( p.getTMFXtextLocation() ) ->  
	setLabel( p.name+": "+p.type.name ) ->
	setName( "child_"+p.name ); 
*/


create SimpleNode toNode( Property p ):  
	setSourceLocation( p.getTMFXtextLocation() ) ->  
	setLabel( p.name+": "+p.type.name ) ->
	setName( p.name ) ->
	setCategory("property") ->
	setFillcolor( ColorEnum::red ); 

entities( Model m ):
 	m.elements.typeSelect(Entity);
 	
simpleProperties( Entity e ) :
	e.properties.select(p|SimpleType.isInstance(p.type));

refs( Entity e ) :
	e.properties.select(p|Entity.isInstance(p.type));
		