GraphCollection:
	(prolog=Prolog)?
	(graphs+=Graph)*;

Prolog:
	"prolog" "{"
		("iconbasepath" iconBasePath=STRING ";")?
	"}";

Graph:
	"graph" name=ID ("top" "=" topnode=[Node])? "{"
		("layoutHints" layoutHints = Properties )?
		"nodes" "{"
			(nodes+=Node)*
		"}"
		"edges" "{"
			(edges+=Edge)*
	  	"}"
	"}";
	  
Node:
	SimpleNode | ContainerNode | CompartmentNode;

SimpleNode:
	"node" name=ID 
		("label" label=STRING)? 
		("tooltip" tooltip=STRING)?
		("icon" icon=STRING)?
		("textcolor" textcolor=ColorEnum)?
		("linecolor" linecolor=ColorEnum)?
		("fillcolor" fillcolor=ColorEnum)?
		("source" sourceLocation=STRING)? 
		("category" category=STRING)?
		("shape" shape=ShapeEnum)?
		("userData" userData = Properties )?
	";";
	
ContainerNode:
	"containernode" name=ID 
		("label" label=STRING)? 
		("tooltip" tooltip=STRING)?
		("icon" icon=STRING)?
		("textcolor" textcolor=ColorEnum)?
		("linecolor" linecolor=ColorEnum)?
		("fillcolor" fillcolor=ColorEnum)?
		("source" sourceLocation=STRING)? 
		("category" category=STRING)?
		("shape" shape=ShapeEnum)?
		("userData" userData = Properties )?
		("contained" containedGraph=Graph )?
	";";

CompartmentNode:
	"compartmentnode" name=ID
		("label" label=STRING)? 
		("tooltip" tooltip=STRING)?
		("icon" icon=STRING)?
		("textcolor" textcolor=ColorEnum)?
		("linecolor" linecolor=ColorEnum)?
		("fillcolor" fillcolor=ColorEnum)?
		("source" sourceLocation=STRING)? 
		("category" category=STRING)?
		("shape" shape=ShapeEnum)?
		("userData" userData = Properties )?
		(compartments+=Compartment)*
	";";

Compartment:
	"compartment" name=ID "{"
		("category" category=STRING)?
		("entry" entry+=STRING)*
	"}";
	
Edge:
	SimpleDirectedEdge;

SimpleDirectedEdge:
	source=[Node] direction=DirectionEnum target=[Node]
		(containment?="containment")? (proxied?="proxied")? (inheritance?="inheritance")?
		("label" label=STRING)? 
		("tooltip" tooltip=STRING)? 
		("icon" icon=STRING)?
		("color" color=ColorEnum)? 
		("weight" weight=INT)?
		("width" width=INT)?
		("style" style=LineStyleEnum)?
		("category" category=STRING)?
		("userData" userData = Properties )?
	";";

Properties:
	(nvpairs+=NVPair)*;


NVPair:
	name=ID ":" type=DataType "=" value=STRING ";";
	
DataType:
  	TextType | IntegerType | BooleanType;
  	
TextType: "text";

IntegerType: "int";

BooleanType: "boolean";	
	
Enum DirectionEnum:
	directed = "->" |
	undirected = "--";	
	
Enum ColorEnum:
	white = "white" |      
	lightGray = "lightGray" |
	gray = "gray" |      
	darkGray = "darkGray" |
	black = "black" |
	red = "red" |
	orange = "orange" |
	yellow = "yellow" |
	green = "green" |
	lightGreen = "lightGreen" |
	darkGreen = "darkGreen" |
	cyan = "cyan" |
	lightBlue = "lightBlue" |
	blue = "blue" |
	darkBlue = "darkBlue";
	

Enum ShapeEnum:
	ubi_cone = "ubi_cone" |      
	ubi_cube = "ubi_cube" |      
	ubi_dodecahedron = "ubi_dodecahedron" |      
	ubi_icosahedron = "ubi_icosahedron" |      
	ubi_octahedron = "ubi_octahedron" |      
	ubi_sphere = "ubi_sphere" |      
	ubi_torus = "ubi_torus";
	

	
Enum LineStyleEnum:
	solid = "solid" | // 1
	dashed = "dashed" | // 2
	dotted = "dotted" | // 3
	dashDotted = "dashDotted" | // 4
	dashDotDotted = "dashDotDotted"; // 5
	
	