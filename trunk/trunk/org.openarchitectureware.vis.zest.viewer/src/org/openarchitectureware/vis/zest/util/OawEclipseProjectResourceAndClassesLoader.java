package org.openarchitectureware.vis.zest.util;import java.io.IOException;import java.io.InputStream;import java.net.MalformedURLException;import java.net.URL;import java.net.URLClassLoader;import java.util.ArrayList;import java.util.List;import org.eclipse.core.resources.IProject;import org.eclipse.core.resources.ResourcesPlugin;import org.eclipse.core.runtime.CoreException;import org.eclipse.jdt.core.IClasspathEntry;import org.eclipse.jdt.core.IJavaProject;import org.eclipse.jdt.core.JavaCore;import org.openarchitectureware.workflow.util.ResourceLoaderDefaultImpl;/** * This ResourceLoader is capable of loading resources from a specific Java * project within the workspace. Typical use is when invoking a workflow from * within a plugin. It can also load classes of the project's classpath. *  * @author PhilippBollbach *  *         inspired by the OawEclipseProjectResourceLoader by * @author Axel Terfloth (axel.terfloth@itemis.de) * @author Karsten Thoms (karsten.thoms@itemis.de) *  */public class OawEclipseProjectResourceAndClassesLoader extends		ResourceLoaderDefaultImpl {	private ClassLoader projectCL;	public OawEclipseProjectResourceAndClassesLoader() {		super();	}	public OawEclipseProjectResourceAndClassesLoader(IProject project)			throws CoreException {		super();		projectCL = createClassLoader(project);		Thread.currentThread().setContextClassLoader(this.projectCL);	}	/**	 * Builds a classloader for a Java project from the workspace.	 * 	 * @param project	 *            An Eclipse project	 * @throws CoreException	 */	public ClassLoader createClassLoader(IProject project) throws CoreException {		IJavaProject jp = JavaCore.create(project);		IClasspathEntry[] javacp = jp.getResolvedClasspath(true);		List<URL> urls = new ArrayList<URL>();		for (int i = 0; i < javacp.length; i++)			try {				if (javacp[i].getEntryKind() > 1) {					//add referenced projects					if (javacp[i].getEntryKind() == 2) {						urls.add(ResourcesPlugin.getWorkspace().getRoot()								.getLocation().append(										javacp[i].getPath().append("bin"))								.toFile().toURL());					//add own project					} else if (javacp[i].getEntryKind() == 3) {						urls.add(ResourcesPlugin.getWorkspace().getRoot()								.getLocation().append(javacp[i].getPath())								.toFile().toURL());					}				} else					urls.add(javacp[i].getPath().toFile().toURL());			} catch (MalformedURLException e) {				e.printStackTrace();			}		return new URLClassLoader((URL[]) urls.toArray(new URL[urls.size()]), Thread.currentThread()				.getContextClassLoader());	}	@Override	protected URL internalGetResource(String path) {		URL resource = super.internalGetResource(path);		if (resource == null) {			resource = projectCL.getResource(path);		}		return resource;	}	@Override	protected InputStream internalGetResourceAsStream(String path) {		URL url = internalGetResource(path);		try {			return url != null ? url.openStream() : null;		} catch (IOException e) {			return null;		}	}	@Override	protected Class<?> internalLoadClass(final String clazzName)			throws ClassNotFoundException {		Class<?> c = projectCL.loadClass(clazzName);			if (c==null) throw new ClassNotFoundException(clazzName);		return c;	}}