import tsl;
import graphmm;

extension org::openarchitectureware::util::stdlib::io;
extension graphmmlib;
extension bwin::ai::btarget::stresstest::Extensions;
 
Object top(Resource p):
	toCollection(p); 

create GraphCollection toCollection( Resource p ):
	graphs.addAll( p.sections.typeSelect(ArchitectureSection).toContainmentGraph());

create Graph toContainmentGraph(ArchitectureSection s):
	setName( "containment" ) ->
	nodes.addAll( s.allSubsystems().createNode() ) ->
	edges.addAll( s.allSubsystems().connectChildren() )  ->
	edges.addAll( s.allSubsystems().connectDependentSubsystems() ) ->
	edges.addAll( s.allComponents().connectComponents() )
	;
	
connectChildren( Subsystem source ):
	source.subsystems.connectChild(source);
	
connectDependentSubsystems( Subsystem source ):
	source.dependentSubsystems().connectDependent(source);
	
connectComponents( Component c ):
	c.referencedComponents().connectComponent(c);
	
referencedComponents( Component c ):
	c.requiredInterfaces().implementer();
	
implementer( Interface i ):
	i.allComponents().select(c|c.providedInterfaces().contains(i));	
	
create SimpleDirectedEdge connectComponent( Component target, Component source ):
	setSource( source.createNode() ) ->
	setTarget( target.createNode() ) -> 
	setWidth(2) ->
	setCategory("component-dependency");
	

dependentSubsystems( Subsystem source ):
	source.components.requirements.interface.owningSubsystem().toSet().without({source});
	
create SimpleDirectedEdge connectDependent( Subsystem supplier, Subsystem client ):
	setSource( client.createNode() ) ->
	setTarget( supplier.createNode() ) -> 
	setDirection( DirectionEnum::directed ) ->
	setCategory("subsystem-dependency") ->
	setWidth( client.dependentSubsystems().size ) ->
	setWeight( client.dependentSubsystems().size ) ->
	setColor( ColorEnum::red );
	
	
create SimpleDirectedEdge connectChild( Subsystem child, Subsystem parent ):
	setSource( parent.createNode() ) ->
	setTarget( child.createNode() ) -> 
	setWidth(2) ->
	setCategory("subsystem-hierarchy");
	

cached allSubsystems( emf::EObject this ):
	eRootContainer.eAllContents.typeSelect(Subsystem); 	
	
cached allComponents( emf::EObject this ):
	eRootContainer.eAllContents.typeSelect(Component); 	
	
	
cached Node createNode( Subsystem s ):
	s.components.size == 0 ? s.createSimpleNode() : s.createContainerNode(); 
	
create SimpleNode createSimpleNode( Subsystem s ):
	setLabel( s.name ) ->
	setCategory("subsystem") ->
	setFillcolor( ColorEnum::white );
	
	 
create ContainerNode createContainerNode( Subsystem s ):
	setLabel( s.name ) ->
	setCategory("subsystem") ->
	setFillcolor( ColorEnum::white ) ->
	setContainedGraph( s.createSubgraphForSubsystem() ); 

create Graph createSubgraphForSubsystem( Subsystem s ):
	nodes.addAll( s.components.createNode() );

create SimpleNode createNode( Component c ):
	setLabel( c.name ) ->
	setCategory("components") ->
	setFillcolor( ColorEnum::blue ); 

	

