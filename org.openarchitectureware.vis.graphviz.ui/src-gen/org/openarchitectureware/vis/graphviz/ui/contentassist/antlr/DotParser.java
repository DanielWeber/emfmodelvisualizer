/*
* generated by Xtext
*/
package org.openarchitectureware.vis.graphviz.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.openarchitectureware.vis.graphviz.services.DotGrammarAccess;

public class DotParser extends AbstractContentAssistParser {
	
	@Inject
	private DotGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.openarchitectureware.vis.graphviz.ui.contentassist.antlr.internal.InternalDotParser createParser() {
		org.openarchitectureware.vis.graphviz.ui.contentassist.antlr.internal.InternalDotParser result = new org.openarchitectureware.vis.graphviz.ui.contentassist.antlr.internal.InternalDotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStmtAccess().getAlternatives_0(), "rule__Stmt__Alternatives_0");
					put(grammarAccess.getEdgeRHSAccess().getAlternatives(), "rule__EdgeRHS__Alternatives");
					put(grammarAccess.getEdgeopAccess().getAlternatives(), "rule__Edgeop__Alternatives");
					put(grammarAccess.getGraphtypeAccess().getAlternatives(), "rule__Graphtype__Alternatives");
					put(grammarAccess.getAttributetypeAccess().getAlternatives(), "rule__Attributetype__Alternatives");
					put(grammarAccess.getGraphvizmodelAccess().getGroup(), "rule__Graphvizmodel__Group__0");
					put(grammarAccess.getGraphAccess().getGroup(), "rule__Graph__Group__0");
					put(grammarAccess.getStmtAccess().getGroup(), "rule__Stmt__Group__0");
					put(grammarAccess.getEdge_stmt_nodeAccess().getGroup(), "rule__Edge_stmt_node__Group__0");
					put(grammarAccess.getEdge_stmt_subgraphAccess().getGroup(), "rule__Edge_stmt_subgraph__Group__0");
					put(grammarAccess.getNode_stmtAccess().getGroup(), "rule__Node_stmt__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttr_stmtAccess().getGroup(), "rule__Attr_stmt__Group__0");
					put(grammarAccess.getAttr_listAccess().getGroup(), "rule__Attr_list__Group__0");
					put(grammarAccess.getA_listAccess().getGroup(), "rule__A_list__Group__0");
					put(grammarAccess.getA_listAccess().getGroup_1(), "rule__A_list__Group_1__0");
					put(grammarAccess.getSubgraphAccess().getGroup(), "rule__Subgraph__Group__0");
					put(grammarAccess.getSubgraphAccess().getGroup_0(), "rule__Subgraph__Group_0__0");
					put(grammarAccess.getEdgeRHS_nodeAccess().getGroup(), "rule__EdgeRHS_node__Group__0");
					put(grammarAccess.getEdgeRHS_subgraphAccess().getGroup(), "rule__EdgeRHS_subgraph__Group__0");
					put(grammarAccess.getGraphvizmodelAccess().getGraphsAssignment_2(), "rule__Graphvizmodel__GraphsAssignment_2");
					put(grammarAccess.getGraphAccess().getStrictAssignment_1(), "rule__Graph__StrictAssignment_1");
					put(grammarAccess.getGraphAccess().getTypeAssignment_2(), "rule__Graph__TypeAssignment_2");
					put(grammarAccess.getGraphAccess().getNameAssignment_3(), "rule__Graph__NameAssignment_3");
					put(grammarAccess.getGraphAccess().getStmtsAssignment_5(), "rule__Graph__StmtsAssignment_5");
					put(grammarAccess.getEdge_stmt_nodeAccess().getNode_idAssignment_0(), "rule__Edge_stmt_node__Node_idAssignment_0");
					put(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSAssignment_1(), "rule__Edge_stmt_node__EdgeRHSAssignment_1");
					put(grammarAccess.getEdge_stmt_nodeAccess().getAttributesAssignment_2(), "rule__Edge_stmt_node__AttributesAssignment_2");
					put(grammarAccess.getEdge_stmt_subgraphAccess().getSubgraphAssignment_0(), "rule__Edge_stmt_subgraph__SubgraphAssignment_0");
					put(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSAssignment_1(), "rule__Edge_stmt_subgraph__EdgeRHSAssignment_1");
					put(grammarAccess.getEdge_stmt_subgraphAccess().getAttributesAssignment_2(), "rule__Edge_stmt_subgraph__AttributesAssignment_2");
					put(grammarAccess.getNode_stmtAccess().getNameAssignment_0(), "rule__Node_stmt__NameAssignment_0");
					put(grammarAccess.getNode_stmtAccess().getAttributesAssignment_1(), "rule__Node_stmt__AttributesAssignment_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getValueAssignment_2(), "rule__Attribute__ValueAssignment_2");
					put(grammarAccess.getAttr_stmtAccess().getTypeAssignment_0(), "rule__Attr_stmt__TypeAssignment_0");
					put(grammarAccess.getAttr_stmtAccess().getAttributesAssignment_1(), "rule__Attr_stmt__AttributesAssignment_1");
					put(grammarAccess.getAttr_listAccess().getA_listAssignment_1(), "rule__Attr_list__A_listAssignment_1");
					put(grammarAccess.getA_listAccess().getNameAssignment_0(), "rule__A_list__NameAssignment_0");
					put(grammarAccess.getA_listAccess().getValueAssignment_1_1(), "rule__A_list__ValueAssignment_1_1");
					put(grammarAccess.getSubgraphAccess().getNameAssignment_0_1(), "rule__Subgraph__NameAssignment_0_1");
					put(grammarAccess.getSubgraphAccess().getStmtsAssignment_2(), "rule__Subgraph__StmtsAssignment_2");
					put(grammarAccess.getEdgeRHS_nodeAccess().getOpAssignment_0(), "rule__EdgeRHS_node__OpAssignment_0");
					put(grammarAccess.getEdgeRHS_nodeAccess().getNodeAssignment_1(), "rule__EdgeRHS_node__NodeAssignment_1");
					put(grammarAccess.getEdgeRHS_subgraphAccess().getOpAssignment_0(), "rule__EdgeRHS_subgraph__OpAssignment_0");
					put(grammarAccess.getEdgeRHS_subgraphAccess().getSubgraphAssignment_1(), "rule__EdgeRHS_subgraph__SubgraphAssignment_1");
					put(grammarAccess.getNode_idAccess().getNameAssignment(), "rule__Node_id__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.openarchitectureware.vis.graphviz.ui.contentassist.antlr.internal.InternalDotParser typedParser = (org.openarchitectureware.vis.graphviz.ui.contentassist.antlr.internal.InternalDotParser) parser;
			typedParser.entryRulegraphvizmodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
