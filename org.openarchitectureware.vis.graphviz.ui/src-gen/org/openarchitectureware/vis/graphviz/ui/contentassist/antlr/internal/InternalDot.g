/*
* generated by Xtext
*/
grammar InternalDot;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.openarchitectureware.vis.graphviz.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.openarchitectureware.vis.graphviz.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.openarchitectureware.vis.graphviz.services.DotGrammarAccess;

}

@parser::members {
 
 	private DotGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DotGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulegraphvizmodel
entryRulegraphvizmodel 
:
{ before(grammarAccess.getGraphvizmodelRule()); }
	 rulegraphvizmodel
{ after(grammarAccess.getGraphvizmodelRule()); } 
	 EOF 
;

// Rule graphvizmodel
rulegraphvizmodel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGraphvizmodelAccess().getGroup()); }
(rule__Graphvizmodel__Group__0)
{ after(grammarAccess.getGraphvizmodelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegraph
entryRulegraph 
:
{ before(grammarAccess.getGraphRule()); }
	 rulegraph
{ after(grammarAccess.getGraphRule()); } 
	 EOF 
;

// Rule graph
rulegraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGraphAccess().getGroup()); }
(rule__Graph__Group__0)
{ after(grammarAccess.getGraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestmt
entryRulestmt 
:
{ before(grammarAccess.getStmtRule()); }
	 rulestmt
{ after(grammarAccess.getStmtRule()); } 
	 EOF 
;

// Rule stmt
rulestmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStmtAccess().getGroup()); }
(rule__Stmt__Group__0)
{ after(grammarAccess.getStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleedge_stmt_node
entryRuleedge_stmt_node 
:
{ before(grammarAccess.getEdge_stmt_nodeRule()); }
	 ruleedge_stmt_node
{ after(grammarAccess.getEdge_stmt_nodeRule()); } 
	 EOF 
;

// Rule edge_stmt_node
ruleedge_stmt_node
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getGroup()); }
(rule__Edge_stmt_node__Group__0)
{ after(grammarAccess.getEdge_stmt_nodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleedge_stmt_subgraph
entryRuleedge_stmt_subgraph 
:
{ before(grammarAccess.getEdge_stmt_subgraphRule()); }
	 ruleedge_stmt_subgraph
{ after(grammarAccess.getEdge_stmt_subgraphRule()); } 
	 EOF 
;

// Rule edge_stmt_subgraph
ruleedge_stmt_subgraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getGroup()); }
(rule__Edge_stmt_subgraph__Group__0)
{ after(grammarAccess.getEdge_stmt_subgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenode_stmt
entryRulenode_stmt 
:
{ before(grammarAccess.getNode_stmtRule()); }
	 rulenode_stmt
{ after(grammarAccess.getNode_stmtRule()); } 
	 EOF 
;

// Rule node_stmt
rulenode_stmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNode_stmtAccess().getGroup()); }
(rule__Node_stmt__Group__0)
{ after(grammarAccess.getNode_stmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleattribute
entryRuleattribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleattribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule attribute
ruleattribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleattr_stmt
entryRuleattr_stmt 
:
{ before(grammarAccess.getAttr_stmtRule()); }
	 ruleattr_stmt
{ after(grammarAccess.getAttr_stmtRule()); } 
	 EOF 
;

// Rule attr_stmt
ruleattr_stmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttr_stmtAccess().getGroup()); }
(rule__Attr_stmt__Group__0)
{ after(grammarAccess.getAttr_stmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleattr_list
entryRuleattr_list 
:
{ before(grammarAccess.getAttr_listRule()); }
	 ruleattr_list
{ after(grammarAccess.getAttr_listRule()); } 
	 EOF 
;

// Rule attr_list
ruleattr_list
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttr_listAccess().getGroup()); }
(rule__Attr_list__Group__0)
{ after(grammarAccess.getAttr_listAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulea_list
entryRulea_list 
:
{ before(grammarAccess.getA_listRule()); }
	 rulea_list
{ after(grammarAccess.getA_listRule()); } 
	 EOF 
;

// Rule a_list
rulea_list
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getA_listAccess().getGroup()); }
(rule__A_list__Group__0)
{ after(grammarAccess.getA_listAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesubgraph
entryRulesubgraph 
:
{ before(grammarAccess.getSubgraphRule()); }
	 rulesubgraph
{ after(grammarAccess.getSubgraphRule()); } 
	 EOF 
;

// Rule subgraph
rulesubgraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubgraphAccess().getGroup()); }
(rule__Subgraph__Group__0)
{ after(grammarAccess.getSubgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleedgeRHS
entryRuleedgeRHS 
:
{ before(grammarAccess.getEdgeRHSRule()); }
	 ruleedgeRHS
{ after(grammarAccess.getEdgeRHSRule()); } 
	 EOF 
;

// Rule edgeRHS
ruleedgeRHS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeRHSAccess().getAlternatives()); }
(rule__EdgeRHS__Alternatives)
{ after(grammarAccess.getEdgeRHSAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleedgeRHS_node
entryRuleedgeRHS_node 
:
{ before(grammarAccess.getEdgeRHS_nodeRule()); }
	 ruleedgeRHS_node
{ after(grammarAccess.getEdgeRHS_nodeRule()); } 
	 EOF 
;

// Rule edgeRHS_node
ruleedgeRHS_node
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeRHS_nodeAccess().getGroup()); }
(rule__EdgeRHS_node__Group__0)
{ after(grammarAccess.getEdgeRHS_nodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleedgeRHS_subgraph
entryRuleedgeRHS_subgraph 
:
{ before(grammarAccess.getEdgeRHS_subgraphRule()); }
	 ruleedgeRHS_subgraph
{ after(grammarAccess.getEdgeRHS_subgraphRule()); } 
	 EOF 
;

// Rule edgeRHS_subgraph
ruleedgeRHS_subgraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeRHS_subgraphAccess().getGroup()); }
(rule__EdgeRHS_subgraph__Group__0)
{ after(grammarAccess.getEdgeRHS_subgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulenode_id
entryRulenode_id 
:
{ before(grammarAccess.getNode_idRule()); }
	 rulenode_id
{ after(grammarAccess.getNode_idRule()); } 
	 EOF 
;

// Rule node_id
rulenode_id
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNode_idAccess().getNameAssignment()); }
(rule__Node_id__NameAssignment)
{ after(grammarAccess.getNode_idAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule edgeop
ruleedgeop
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeopAccess().getAlternatives()); }
(rule__Edgeop__Alternatives)
{ after(grammarAccess.getEdgeopAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule graphtype
rulegraphtype
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphtypeAccess().getAlternatives()); }
(rule__Graphtype__Alternatives)
{ after(grammarAccess.getGraphtypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule attributetype
ruleattributetype
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributetypeAccess().getAlternatives()); }
(rule__Attributetype__Alternatives)
{ after(grammarAccess.getAttributetypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Stmt__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getEdge_stmt_nodeParserRuleCall_0_0()); }
	ruleedge_stmt_node
{ after(grammarAccess.getStmtAccess().getEdge_stmt_nodeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getEdge_stmt_subgraphParserRuleCall_0_1()); }
	ruleedge_stmt_subgraph
{ after(grammarAccess.getStmtAccess().getEdge_stmt_subgraphParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getNode_stmtParserRuleCall_0_2()); }
	rulenode_stmt
{ after(grammarAccess.getStmtAccess().getNode_stmtParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_3()); }
	ruleattribute
{ after(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getAttr_stmtParserRuleCall_0_4()); }
	ruleattr_stmt
{ after(grammarAccess.getStmtAccess().getAttr_stmtParserRuleCall_0_4()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getSubgraphParserRuleCall_0_5()); }
	rulesubgraph
{ after(grammarAccess.getStmtAccess().getSubgraphParserRuleCall_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHSAccess().getEdgeRHS_nodeParserRuleCall_0()); }
	ruleedgeRHS_node
{ after(grammarAccess.getEdgeRHSAccess().getEdgeRHS_nodeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEdgeRHSAccess().getEdgeRHS_subgraphParserRuleCall_1()); }
	ruleedgeRHS_subgraph
{ after(grammarAccess.getEdgeRHSAccess().getEdgeRHS_subgraphParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edgeop__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeopAccess().getDirectedEnumLiteralDeclaration_0()); }
(	'->' 
)
{ after(grammarAccess.getEdgeopAccess().getDirectedEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEdgeopAccess().getUndirectedEnumLiteralDeclaration_1()); }
(	'--' 
)
{ after(grammarAccess.getEdgeopAccess().getUndirectedEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Graphtype__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphtypeAccess().getGraphEnumLiteralDeclaration_0()); }
(	'graph' 
)
{ after(grammarAccess.getGraphtypeAccess().getGraphEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getGraphtypeAccess().getDigraphEnumLiteralDeclaration_1()); }
(	'digraph' 
)
{ after(grammarAccess.getGraphtypeAccess().getDigraphEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attributetype__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributetypeAccess().getGraphEnumLiteralDeclaration_0()); }
(	'graph' 
)
{ after(grammarAccess.getAttributetypeAccess().getGraphEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAttributetypeAccess().getNodeEnumLiteralDeclaration_1()); }
(	'node' 
)
{ after(grammarAccess.getAttributetypeAccess().getNodeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAttributetypeAccess().getEdgeEnumLiteralDeclaration_2()); }
(	'edge' 
)
{ after(grammarAccess.getAttributetypeAccess().getEdgeEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Graphvizmodel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graphvizmodel__Group__0__Impl
	rule__Graphvizmodel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graphvizmodel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphvizmodelAccess().getGraphsKeyword_0()); }

	'graphs' 

{ after(grammarAccess.getGraphvizmodelAccess().getGraphsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graphvizmodel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graphvizmodel__Group__1__Impl
	rule__Graphvizmodel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Graphvizmodel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphvizmodelAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getGraphvizmodelAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graphvizmodel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graphvizmodel__Group__2__Impl
	rule__Graphvizmodel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Graphvizmodel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphvizmodelAccess().getGraphsAssignment_2()); }
(rule__Graphvizmodel__GraphsAssignment_2)*
{ after(grammarAccess.getGraphvizmodelAccess().getGraphsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graphvizmodel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graphvizmodel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graphvizmodel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphvizmodelAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getGraphvizmodelAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Graph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graph__Group__0__Impl
	rule__Graph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getGraphKeyword_0()); }

	'graph' 

{ after(grammarAccess.getGraphAccess().getGraphKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graph__Group__1__Impl
	rule__Graph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getStrictAssignment_1()); }
(rule__Graph__StrictAssignment_1)?
{ after(grammarAccess.getGraphAccess().getStrictAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graph__Group__2__Impl
	rule__Graph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getTypeAssignment_2()); }
(rule__Graph__TypeAssignment_2)
{ after(grammarAccess.getGraphAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graph__Group__3__Impl
	rule__Graph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getNameAssignment_3()); }
(rule__Graph__NameAssignment_3)?
{ after(grammarAccess.getGraphAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graph__Group__4__Impl
	rule__Graph__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graph__Group__5__Impl
	rule__Graph__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getStmtsAssignment_5()); }
(rule__Graph__StmtsAssignment_5)*
{ after(grammarAccess.getGraphAccess().getStmtsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Graph__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Graph__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Stmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__0__Impl
	rule__Stmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getAlternatives_0()); }
(rule__Stmt__Alternatives_0)
{ after(grammarAccess.getStmtAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }
(
	';' 
)?
{ after(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Edge_stmt_node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edge_stmt_node__Group__0__Impl
	rule__Edge_stmt_node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_node__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getNode_idAssignment_0()); }
(rule__Edge_stmt_node__Node_idAssignment_0)
{ after(grammarAccess.getEdge_stmt_nodeAccess().getNode_idAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Edge_stmt_node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edge_stmt_node__Group__1__Impl
	rule__Edge_stmt_node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_node__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSAssignment_1()); }
(rule__Edge_stmt_node__EdgeRHSAssignment_1)
{ after(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSAssignment_1()); }
)
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSAssignment_1()); }
(rule__Edge_stmt_node__EdgeRHSAssignment_1)*
{ after(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Edge_stmt_node__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edge_stmt_node__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_node__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getAttributesAssignment_2()); }
(rule__Edge_stmt_node__AttributesAssignment_2)*
{ after(grammarAccess.getEdge_stmt_nodeAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Edge_stmt_subgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edge_stmt_subgraph__Group__0__Impl
	rule__Edge_stmt_subgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_subgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getSubgraphAssignment_0()); }
(rule__Edge_stmt_subgraph__SubgraphAssignment_0)
{ after(grammarAccess.getEdge_stmt_subgraphAccess().getSubgraphAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Edge_stmt_subgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edge_stmt_subgraph__Group__1__Impl
	rule__Edge_stmt_subgraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_subgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSAssignment_1()); }
(rule__Edge_stmt_subgraph__EdgeRHSAssignment_1)
{ after(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSAssignment_1()); }
)
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSAssignment_1()); }
(rule__Edge_stmt_subgraph__EdgeRHSAssignment_1)*
{ after(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Edge_stmt_subgraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Edge_stmt_subgraph__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_subgraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getAttributesAssignment_2()); }
(rule__Edge_stmt_subgraph__AttributesAssignment_2)*
{ after(grammarAccess.getEdge_stmt_subgraphAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Node_stmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node_stmt__Group__0__Impl
	rule__Node_stmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_stmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNode_stmtAccess().getNameAssignment_0()); }
(rule__Node_stmt__NameAssignment_0)
{ after(grammarAccess.getNode_stmtAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Node_stmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Node_stmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node_stmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNode_stmtAccess().getAttributesAssignment_1()); }
(rule__Node_stmt__AttributesAssignment_1)*
{ after(grammarAccess.getNode_stmtAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
(rule__Attribute__NameAssignment_0)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueAssignment_2()); }
(rule__Attribute__ValueAssignment_2)
{ after(grammarAccess.getAttributeAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Attr_stmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr_stmt__Group__0__Impl
	rule__Attr_stmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_stmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttr_stmtAccess().getTypeAssignment_0()); }
(rule__Attr_stmt__TypeAssignment_0)
{ after(grammarAccess.getAttr_stmtAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr_stmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr_stmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_stmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAttr_stmtAccess().getAttributesAssignment_1()); }
(rule__Attr_stmt__AttributesAssignment_1)
{ after(grammarAccess.getAttr_stmtAccess().getAttributesAssignment_1()); }
)
(
{ before(grammarAccess.getAttr_stmtAccess().getAttributesAssignment_1()); }
(rule__Attr_stmt__AttributesAssignment_1)*
{ after(grammarAccess.getAttr_stmtAccess().getAttributesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attr_list__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr_list__Group__0__Impl
	rule__Attr_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_list__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttr_listAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getAttr_listAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr_list__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr_list__Group__1__Impl
	rule__Attr_list__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_list__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttr_listAccess().getA_listAssignment_1()); }
(rule__Attr_list__A_listAssignment_1)*
{ after(grammarAccess.getAttr_listAccess().getA_listAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attr_list__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attr_list__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_list__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttr_listAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getAttr_listAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__A_list__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A_list__Group__0__Impl
	rule__A_list__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__A_list__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getA_listAccess().getNameAssignment_0()); }
(rule__A_list__NameAssignment_0)
{ after(grammarAccess.getA_listAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__A_list__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A_list__Group__1__Impl
	rule__A_list__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__A_list__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getA_listAccess().getGroup_1()); }
(rule__A_list__Group_1__0)?
{ after(grammarAccess.getA_listAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__A_list__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A_list__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__A_list__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getA_listAccess().getCommaKeyword_2()); }
(
	',' 
)?
{ after(grammarAccess.getA_listAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__A_list__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A_list__Group_1__0__Impl
	rule__A_list__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__A_list__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getA_listAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getA_listAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__A_list__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__A_list__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__A_list__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getA_listAccess().getValueAssignment_1_1()); }
(rule__A_list__ValueAssignment_1_1)
{ after(grammarAccess.getA_listAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Subgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__0__Impl
	rule__Subgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getGroup_0()); }
(rule__Subgraph__Group_0__0)?
{ after(grammarAccess.getSubgraphAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__1__Impl
	rule__Subgraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__2__Impl
	rule__Subgraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getStmtsAssignment_2()); }
(rule__Subgraph__StmtsAssignment_2)*
{ after(grammarAccess.getSubgraphAccess().getStmtsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Subgraph__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group_0__0__Impl
	rule__Subgraph__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getSubgraphKeyword_0_0()); }

	'subgraph' 

{ after(grammarAccess.getSubgraphAccess().getSubgraphKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getNameAssignment_0_1()); }
(rule__Subgraph__NameAssignment_0_1)?
{ after(grammarAccess.getSubgraphAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeRHS_node__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRHS_node__Group__0__Impl
	rule__EdgeRHS_node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_node__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_nodeAccess().getOpAssignment_0()); }
(rule__EdgeRHS_node__OpAssignment_0)
{ after(grammarAccess.getEdgeRHS_nodeAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeRHS_node__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRHS_node__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_node__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_nodeAccess().getNodeAssignment_1()); }
(rule__EdgeRHS_node__NodeAssignment_1)
{ after(grammarAccess.getEdgeRHS_nodeAccess().getNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeRHS_subgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRHS_subgraph__Group__0__Impl
	rule__EdgeRHS_subgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_subgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_subgraphAccess().getOpAssignment_0()); }
(rule__EdgeRHS_subgraph__OpAssignment_0)
{ after(grammarAccess.getEdgeRHS_subgraphAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeRHS_subgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRHS_subgraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_subgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_subgraphAccess().getSubgraphAssignment_1()); }
(rule__EdgeRHS_subgraph__SubgraphAssignment_1)
{ after(grammarAccess.getEdgeRHS_subgraphAccess().getSubgraphAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Graphvizmodel__GraphsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphvizmodelAccess().getGraphsGraphParserRuleCall_2_0()); }
	rulegraph{ after(grammarAccess.getGraphvizmodelAccess().getGraphsGraphParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__StrictAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getStrictStrictKeyword_1_0()); }
(
{ before(grammarAccess.getGraphAccess().getStrictStrictKeyword_1_0()); }

	'strict' 

{ after(grammarAccess.getGraphAccess().getStrictStrictKeyword_1_0()); }
)

{ after(grammarAccess.getGraphAccess().getStrictStrictKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getTypeGraphtypeEnumRuleCall_2_0()); }
	rulegraphtype{ after(grammarAccess.getGraphAccess().getTypeGraphtypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getNameDOT_IDTerminalRuleCall_3_0()); }
	RULE_DOT_ID{ after(grammarAccess.getGraphAccess().getNameDOT_IDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Graph__StmtsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphAccess().getStmtsStmtParserRuleCall_5_0()); }
	rulestmt{ after(grammarAccess.getGraphAccess().getStmtsStmtParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_node__Node_idAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getNode_idNode_idParserRuleCall_0_0()); }
	rulenode_id{ after(grammarAccess.getEdge_stmt_nodeAccess().getNode_idNode_idParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_node__EdgeRHSAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSEdgeRHSParserRuleCall_1_0()); }
	ruleedgeRHS{ after(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSEdgeRHSParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_node__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_nodeAccess().getAttributesAttr_listParserRuleCall_2_0()); }
	ruleattr_list{ after(grammarAccess.getEdge_stmt_nodeAccess().getAttributesAttr_listParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_subgraph__SubgraphAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getSubgraphSubgraphParserRuleCall_0_0()); }
	rulesubgraph{ after(grammarAccess.getEdge_stmt_subgraphAccess().getSubgraphSubgraphParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_subgraph__EdgeRHSAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSEdgeRHSParserRuleCall_1_0()); }
	ruleedgeRHS{ after(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSEdgeRHSParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Edge_stmt_subgraph__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdge_stmt_subgraphAccess().getAttributesAttr_listParserRuleCall_2_0()); }
	ruleattr_list{ after(grammarAccess.getEdge_stmt_subgraphAccess().getAttributesAttr_listParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node_stmt__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNode_stmtAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
	RULE_DOT_ID{ after(grammarAccess.getNode_stmtAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node_stmt__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNode_stmtAccess().getAttributesAttr_listParserRuleCall_1_0()); }
	ruleattr_list{ after(grammarAccess.getNode_stmtAccess().getAttributesAttr_listParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
	RULE_DOT_ID{ after(grammarAccess.getAttributeAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueDOT_IDTerminalRuleCall_2_0()); }
	RULE_DOT_ID{ after(grammarAccess.getAttributeAccess().getValueDOT_IDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_stmt__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttr_stmtAccess().getTypeAttributetypeEnumRuleCall_0_0()); }
	ruleattributetype{ after(grammarAccess.getAttr_stmtAccess().getTypeAttributetypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_stmt__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttr_stmtAccess().getAttributesAttr_listParserRuleCall_1_0()); }
	ruleattr_list{ after(grammarAccess.getAttr_stmtAccess().getAttributesAttr_listParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attr_list__A_listAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttr_listAccess().getA_listA_listParserRuleCall_1_0()); }
	rulea_list{ after(grammarAccess.getAttr_listAccess().getA_listA_listParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__A_list__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getA_listAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
	RULE_DOT_ID{ after(grammarAccess.getA_listAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__A_list__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getA_listAccess().getValueDOT_IDTerminalRuleCall_1_1_0()); }
	RULE_DOT_ID{ after(grammarAccess.getA_listAccess().getValueDOT_IDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getNameDOT_IDTerminalRuleCall_0_1_0()); }
	RULE_DOT_ID{ after(grammarAccess.getSubgraphAccess().getNameDOT_IDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__StmtsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_2_0()); }
	rulestmt{ after(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_node__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_nodeAccess().getOpEdgeopEnumRuleCall_0_0()); }
	ruleedgeop{ after(grammarAccess.getEdgeRHS_nodeAccess().getOpEdgeopEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_node__NodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_nodeAccess().getNodeNode_idParserRuleCall_1_0()); }
	rulenode_id{ after(grammarAccess.getEdgeRHS_nodeAccess().getNodeNode_idParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_subgraph__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_subgraphAccess().getOpEdgeopEnumRuleCall_0_0()); }
	ruleedgeop{ after(grammarAccess.getEdgeRHS_subgraphAccess().getOpEdgeopEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRHS_subgraph__SubgraphAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRHS_subgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); }
	rulesubgraph{ after(grammarAccess.getEdgeRHS_subgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node_id__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNode_idAccess().getNameDOT_IDTerminalRuleCall_0()); }
	RULE_DOT_ID{ after(grammarAccess.getNode_idAccess().getNameDOT_IDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOT_ID : ('^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~('"'))* '"'|'-'? ('.' ('0'..'9')+|('0'..'9')+ ('.' ('0'..'9')*)?));

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


