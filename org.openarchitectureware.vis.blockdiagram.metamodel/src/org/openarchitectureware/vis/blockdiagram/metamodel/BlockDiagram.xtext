grammar org.openarchitectureware.vis.blockdiagram.metamodel.BlockDiagram with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate blockDiagram "http://www.openarchitectureware.org/vis/blockdiagram/metamodel/BlockDiagram"

Model:
	(prolog=Prolog)?
	diagram=Diagram;

Prolog:
	"prolog" "{"
		("iconbasepath" iconBasePath=STRING ";"?)?
	"}";

// A diagram represents an entire block diagram (see http://en.wikipedia.org/wiki/Block_diagram).
// The diagram consists out of shapes and connections. Shapes are recursivly nested in each other
// starting with the rootShape.

Diagram:
	"diagram" (name=ID)? "{"

	    ("shapes" layout=Layout "{"
			// these values are defaults for all childs (and grandchilds)
			(defaultValues=DefaultValues)?
			(shapes+=Shape)+
	    "}" ";"?)

		("connections" "{"
			(connections+=Connection)+
		"}" ";"? )?

		(userProperties=Properties)?

	"}" ";"?;

// Base class for all shape types

Shape:
	BlockShape | SpaceShape | LayoutShape;

// A block shape represents an rectangular shape with a border, a text label and an icon.
// A block shape can contain child shapes. The layout (either horizontal or vertical) defines how
// the childs are positioned.

BlockShape:
	"block" (name=ID)?
	("label" label=STRING)?
	("icon" icon=STRING)?
	attributes=ShapeAttributes
	("shapes" layout=Layout "{"
			// these values are defaults for all childs (and grandchilds)
			(defaultValues=DefaultValues)?
			(shapes+=Shape)+
	  "}")? ";"?;

DefaultValues:
	"default"
	("spacing" spacing=INT)?
	attributes=ShapeAttributes;

ShapeAttributes:
	("inset" inset=INT)?
	("labelPlacement" labelPlacement=LabelPlacementEnum)?
	("fillColor" fillColor=Color)?
	lineAttributes=LineAttributes
	fontAttributes=FontAttributes
	("tooltip" tooltip=STRING)?
	// FIXME: isn't this more like a property and should not be a first class member of the shape attributes?
	("source" sourceLocation=STRING)?
	// the eObject provides a link to a model object. May be filled during m2m transformation
	("eObject" dataObject=[ecore::EObject])?
	("properties" userProperties=Properties)?;

// A space shape represents an rectangluar area of a certain width.
// Used to specify a certain distance between adjacent shapes

SpaceShape:
	"space" (name=ID)? "width" width=INT ";"?;

// A shaps that draws a line

LayoutShape:
	"layout" (name=ID)? layout=Layout
	"{"
		(shapes+=Shape)+
  	"}"
  	 ";"?;

Connection:
	SimpleConnection;

SimpleConnection:
	"connection" (name=ID)?
	"source" source=[Shape]
	"target" target=[Shape]
	lineAttributes=LineAttributes
	("fillColor" fillColor=Color)?
	("sourceDecoration" sourceDecoration=ConnectionDecorationEnum)?
	("targetDecoration" targetDecoration=ConnectionDecorationEnum)?
	("labels" "{"
		(label+=ConnectorLabel)*
	"}")?
	";"?;

Layout:
	ToolbarLayout | FlowLayout | FillLayout;

ToolbarLayout:
	"toolbarLayout" layout=LayoutOrientationEnum ("spacing" spacing=INT)?;

FlowLayout:
	"flowLayout" layout=LayoutOrientationEnum ("spacing" spacing=INT)?;

FillLayout:
	"fillLayout" layout=LayoutOrientationEnum ("mode" mode=FillLayoutEnum)? ("spacing" spacing=INT)?;

Color:
	colorEnum = ColorEnum | color=STRING;

Properties:
	nvPairs+=NVPair+;

FontAttributes:
	("fontName" fontName=STRING)?
	("fontSize" fontSize=INT)?
	("fontStyle" fontStyle=FontStyleEnum)?
	("fontColor" fontColor=Color)?;

LineAttributes:
	("lineColor" lineColor=Color)?
	("lineStyle" lineStyle=LineStyleEnum)?
	("lineWidth" lineWidth=INT)?;

ConnectorLabel:
	"label" (name=ID "text")? "text" label=STRING
	("position" position=ConnectionLabelPositionEnum)?
	("alignment" alignment=ConnectionLabelAlignmentEnum)?
	fontAttributes=FontAttributes ";"?;

NVPair:
	"name" name=STRING "value" value=STRING;

// --------------------------------------------------------------------------
// Enums
// --------------------------------------------------------------------------

enum LabelPlacementEnum:
	north |
	northwest |
	northeast |
	east |
	west |
	southwest |
	south |
	southeast;

enum LayoutOrientationEnum:
	vertical |
	horizontal;

enum ColorEnum:
	black |
	white |
	lightGray |
	gray		|
	darkGray	|
	red			|
	orange		|
	yellow		|
	green		|
	lightGreen	|
	darkGreen	|
	cyan		|
	lightBlue	|
	blue		|
	darkBlue;

enum LineStyleEnum:
	solid			|
	dashed			|
	dotted			|
	dashDotted		|
	dashDotDotted;

enum FontStyleEnum:
	normal |
	bold |
	italic;

enum ConnectionLabelPositionEnum:
	source |
	center |
	target;

enum ConnectionLabelAlignmentEnum:
	west |
	center |
	east;

enum ConnectionDecorationEnum:
	noDecoration |
	arrowhead;

enum FillLayoutEnum:
	proportional |
	samesize;
