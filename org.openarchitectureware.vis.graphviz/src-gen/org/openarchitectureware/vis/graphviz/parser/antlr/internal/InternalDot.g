/*
* generated by Xtext
*/
grammar InternalDot;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.openarchitectureware.vis.graphviz.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.openarchitectureware.vis.graphviz.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.openarchitectureware.vis.graphviz.services.DotGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private DotGrammarAccess grammarAccess;
 	
    public InternalDotParser(TokenStream input, IAstFactory factory, DotGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/openarchitectureware/vis/graphviz/parser/antlr/internal/InternalDot.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "graphvizmodel";	
   	}
   	
   	@Override
   	protected DotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulegraphvizmodel
entryRulegraphvizmodel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGraphvizmodelRule(), currentNode); }
	 iv_rulegraphvizmodel=rulegraphvizmodel 
	 { $current=$iv_rulegraphvizmodel.current; } 
	 EOF 
;

// Rule graphvizmodel
rulegraphvizmodel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'graphs' 
    {
        createLeafNode(grammarAccess.getGraphvizmodelAccess().getGraphsKeyword_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getGraphvizmodelAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGraphvizmodelAccess().getGraphsGraphParserRuleCall_2_0(), currentNode); 
	    }
		lv_graphs_2_0=rulegraph		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGraphvizmodelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"graphs",
	        		lv_graphs_2_0, 
	        		"graph", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getGraphvizmodelAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRulegraph
entryRulegraph returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGraphRule(), currentNode); }
	 iv_rulegraph=rulegraph 
	 { $current=$iv_rulegraph.current; } 
	 EOF 
;

// Rule graph
rulegraph returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'graph' 
    {
        createLeafNode(grammarAccess.getGraphAccess().getGraphKeyword_0(), null); 
    }
(
(
		lv_strict_1_0=	'strict' 
    {
        createLeafNode(grammarAccess.getGraphAccess().getStrictStrictKeyword_1_0(), "strict"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "strict", true, "strict", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGraphAccess().getTypeGraphtypeEnumRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=rulegraphtype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"graphtype", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_3_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getGraphAccess().getNameDOT_IDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getGraphAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getGraphAccess().getStmtsStmtParserRuleCall_5_0(), currentNode); 
	    }
		lv_stmts_5_0=rulestmt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getGraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"stmts",
	        		lv_stmts_5_0, 
	        		"stmt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getGraphAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRulestmt
entryRulestmt returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStmtRule(), currentNode); }
	 iv_rulestmt=rulestmt 
	 { $current=$iv_rulestmt.current; } 
	 EOF 
;

// Rule stmt
rulestmt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStmtAccess().getEdge_stmt_nodeParserRuleCall_0_0(), currentNode); 
    }
    this_edge_stmt_node_0=ruleedge_stmt_node
    { 
        $current = $this_edge_stmt_node_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStmtAccess().getEdge_stmt_subgraphParserRuleCall_0_1(), currentNode); 
    }
    this_edge_stmt_subgraph_1=ruleedge_stmt_subgraph
    { 
        $current = $this_edge_stmt_subgraph_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStmtAccess().getNode_stmtParserRuleCall_0_2(), currentNode); 
    }
    this_node_stmt_2=rulenode_stmt
    { 
        $current = $this_node_stmt_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_3(), currentNode); 
    }
    this_attribute_3=ruleattribute
    { 
        $current = $this_attribute_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStmtAccess().getAttr_stmtParserRuleCall_0_4(), currentNode); 
    }
    this_attr_stmt_4=ruleattr_stmt
    { 
        $current = $this_attr_stmt_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStmtAccess().getSubgraphParserRuleCall_0_5(), currentNode); 
    }
    this_subgraph_5=rulesubgraph
    { 
        $current = $this_subgraph_5.current; 
        currentNode = currentNode.getParent();
    }
)(	';' 
    {
        createLeafNode(grammarAccess.getStmtAccess().getSemicolonKeyword_1(), null); 
    }
)?)
;





// Entry rule entryRuleedge_stmt_node
entryRuleedge_stmt_node returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEdge_stmt_nodeRule(), currentNode); }
	 iv_ruleedge_stmt_node=ruleedge_stmt_node 
	 { $current=$iv_ruleedge_stmt_node.current; } 
	 EOF 
;

// Rule edge_stmt_node
ruleedge_stmt_node returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdge_stmt_nodeAccess().getNode_idNode_idParserRuleCall_0_0(), currentNode); 
	    }
		lv_node_id_0_0=rulenode_id		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdge_stmt_nodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"node_id",
	        		lv_node_id_0_0, 
	        		"node_id", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdge_stmt_nodeAccess().getEdgeRHSEdgeRHSParserRuleCall_1_0(), currentNode); 
	    }
		lv_edgeRHS_1_0=ruleedgeRHS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdge_stmt_nodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"edgeRHS",
	        		lv_edgeRHS_1_0, 
	        		"edgeRHS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdge_stmt_nodeAccess().getAttributesAttr_listParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=ruleattr_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdge_stmt_nodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"attr_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleedge_stmt_subgraph
entryRuleedge_stmt_subgraph returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEdge_stmt_subgraphRule(), currentNode); }
	 iv_ruleedge_stmt_subgraph=ruleedge_stmt_subgraph 
	 { $current=$iv_ruleedge_stmt_subgraph.current; } 
	 EOF 
;

// Rule edge_stmt_subgraph
ruleedge_stmt_subgraph returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdge_stmt_subgraphAccess().getSubgraphSubgraphParserRuleCall_0_0(), currentNode); 
	    }
		lv_subgraph_0_0=rulesubgraph		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdge_stmt_subgraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"subgraph",
	        		lv_subgraph_0_0, 
	        		"subgraph", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdge_stmt_subgraphAccess().getEdgeRHSEdgeRHSParserRuleCall_1_0(), currentNode); 
	    }
		lv_edgeRHS_1_0=ruleedgeRHS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdge_stmt_subgraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"edgeRHS",
	        		lv_edgeRHS_1_0, 
	        		"edgeRHS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdge_stmt_subgraphAccess().getAttributesAttr_listParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=ruleattr_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdge_stmt_subgraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"attr_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRulenode_stmt
entryRulenode_stmt returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNode_stmtRule(), currentNode); }
	 iv_rulenode_stmt=rulenode_stmt 
	 { $current=$iv_rulenode_stmt.current; } 
	 EOF 
;

// Rule node_stmt
rulenode_stmt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getNode_stmtAccess().getNameDOT_IDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNode_stmtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNode_stmtAccess().getAttributesAttr_listParserRuleCall_1_0(), currentNode); 
	    }
		lv_attributes_1_0=ruleattr_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNode_stmtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_1_0, 
	        		"attr_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleattribute
entryRuleattribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleattribute=ruleattribute 
	 { $current=$iv_ruleattribute.current; } 
	 EOF 
;

// Rule attribute
ruleattribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getAttributeAccess().getNameDOT_IDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getAttributeAccess().getValueDOT_IDTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleattr_stmt
entryRuleattr_stmt returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttr_stmtRule(), currentNode); }
	 iv_ruleattr_stmt=ruleattr_stmt 
	 { $current=$iv_ruleattr_stmt.current; } 
	 EOF 
;

// Rule attr_stmt
ruleattr_stmt returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttr_stmtAccess().getTypeAttributetypeEnumRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleattributetype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttr_stmtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"attributetype", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttr_stmtAccess().getAttributesAttr_listParserRuleCall_1_0(), currentNode); 
	    }
		lv_attributes_1_0=ruleattr_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttr_stmtRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_1_0, 
	        		"attr_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleattr_list
entryRuleattr_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttr_listRule(), currentNode); }
	 iv_ruleattr_list=ruleattr_list 
	 { $current=$iv_ruleattr_list.current; } 
	 EOF 
;

// Rule attr_list
ruleattr_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getAttr_listAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttr_listAccess().getA_listA_listParserRuleCall_1_0(), currentNode); 
	    }
		lv_a_list_1_0=rulea_list		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttr_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"a_list",
	        		lv_a_list_1_0, 
	        		"a_list", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	']' 
    {
        createLeafNode(grammarAccess.getAttr_listAccess().getRightSquareBracketKeyword_2(), null); 
    }
)
;





// Entry rule entryRulea_list
entryRulea_list returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getA_listRule(), currentNode); }
	 iv_rulea_list=rulea_list 
	 { $current=$iv_rulea_list.current; } 
	 EOF 
;

// Rule a_list
rulea_list returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getA_listAccess().getNameDOT_IDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getA_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getA_listAccess().getEqualsSignKeyword_1_0(), null); 
    }
(
(
		lv_value_2_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getA_listAccess().getValueDOT_IDTerminalRuleCall_1_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getA_listRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	',' 
    {
        createLeafNode(grammarAccess.getA_listAccess().getCommaKeyword_2(), null); 
    }
)?)
;





// Entry rule entryRulesubgraph
entryRulesubgraph returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubgraphRule(), currentNode); }
	 iv_rulesubgraph=rulesubgraph 
	 { $current=$iv_rulesubgraph.current; } 
	 EOF 
;

// Rule subgraph
rulesubgraph returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'subgraph' 
    {
        createLeafNode(grammarAccess.getSubgraphAccess().getSubgraphKeyword_0_0(), null); 
    }
(
(
		lv_name_1_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getSubgraphAccess().getNameDOT_IDTerminalRuleCall_0_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubgraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)?	'{' 
    {
        createLeafNode(grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_2_0(), currentNode); 
	    }
		lv_stmts_3_0=rulestmt		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubgraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"stmts",
	        		lv_stmts_3_0, 
	        		"stmt", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleedgeRHS
entryRuleedgeRHS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEdgeRHSRule(), currentNode); }
	 iv_ruleedgeRHS=ruleedgeRHS 
	 { $current=$iv_ruleedgeRHS.current; } 
	 EOF 
;

// Rule edgeRHS
ruleedgeRHS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEdgeRHSAccess().getEdgeRHS_nodeParserRuleCall_0(), currentNode); 
    }
    this_edgeRHS_node_0=ruleedgeRHS_node
    { 
        $current = $this_edgeRHS_node_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEdgeRHSAccess().getEdgeRHS_subgraphParserRuleCall_1(), currentNode); 
    }
    this_edgeRHS_subgraph_1=ruleedgeRHS_subgraph
    { 
        $current = $this_edgeRHS_subgraph_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleedgeRHS_node
entryRuleedgeRHS_node returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEdgeRHS_nodeRule(), currentNode); }
	 iv_ruleedgeRHS_node=ruleedgeRHS_node 
	 { $current=$iv_ruleedgeRHS_node.current; } 
	 EOF 
;

// Rule edgeRHS_node
ruleedgeRHS_node returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdgeRHS_nodeAccess().getOpEdgeopEnumRuleCall_0_0(), currentNode); 
	    }
		lv_op_0_0=ruleedgeop		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdgeRHS_nodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_0_0, 
	        		"edgeop", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdgeRHS_nodeAccess().getNodeNode_idParserRuleCall_1_0(), currentNode); 
	    }
		lv_node_1_0=rulenode_id		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdgeRHS_nodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"node",
	        		lv_node_1_0, 
	        		"node_id", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleedgeRHS_subgraph
entryRuleedgeRHS_subgraph returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEdgeRHS_subgraphRule(), currentNode); }
	 iv_ruleedgeRHS_subgraph=ruleedgeRHS_subgraph 
	 { $current=$iv_ruleedgeRHS_subgraph.current; } 
	 EOF 
;

// Rule edgeRHS_subgraph
ruleedgeRHS_subgraph returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdgeRHS_subgraphAccess().getOpEdgeopEnumRuleCall_0_0(), currentNode); 
	    }
		lv_op_0_0=ruleedgeop		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdgeRHS_subgraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_0_0, 
	        		"edgeop", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEdgeRHS_subgraphAccess().getSubgraphSubgraphParserRuleCall_1_0(), currentNode); 
	    }
		lv_subgraph_1_0=rulesubgraph		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEdgeRHS_subgraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"subgraph",
	        		lv_subgraph_1_0, 
	        		"subgraph", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulenode_id
entryRulenode_id returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNode_idRule(), currentNode); }
	 iv_rulenode_id=rulenode_id 
	 { $current=$iv_rulenode_id.current; } 
	 EOF 
;

// Rule node_id
rulenode_id returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_DOT_ID
		{
			createLeafNode(grammarAccess.getNode_idAccess().getNameDOT_IDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNode_idRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"DOT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Rule edgeop
ruleedgeop returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'->' 
	{
        $current = grammarAccess.getEdgeopAccess().getDirectedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEdgeopAccess().getDirectedEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'--' 
	{
        $current = grammarAccess.getEdgeopAccess().getUndirectedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEdgeopAccess().getUndirectedEnumLiteralDeclaration_1(), null); 
    }
));



// Rule graphtype
rulegraphtype returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'graph' 
	{
        $current = grammarAccess.getGraphtypeAccess().getGraphEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getGraphtypeAccess().getGraphEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'digraph' 
	{
        $current = grammarAccess.getGraphtypeAccess().getDigraphEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getGraphtypeAccess().getDigraphEnumLiteralDeclaration_1(), null); 
    }
));



// Rule attributetype
ruleattributetype returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'graph' 
	{
        $current = grammarAccess.getAttributetypeAccess().getGraphEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributetypeAccess().getGraphEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'node' 
	{
        $current = grammarAccess.getAttributetypeAccess().getNodeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributetypeAccess().getNodeEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'edge' 
	{
        $current = grammarAccess.getAttributetypeAccess().getEdgeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributetypeAccess().getEdgeEnumLiteralDeclaration_2(), null); 
    }
));



RULE_DOT_ID : ('^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~('"'))* '"'|'-'? ('.' ('0'..'9')+|('0'..'9')+ ('.' ('0'..'9')*)?));

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


