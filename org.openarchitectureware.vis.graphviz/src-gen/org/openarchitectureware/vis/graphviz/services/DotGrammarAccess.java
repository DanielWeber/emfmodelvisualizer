/*
* generated by Xtext
*/

package org.openarchitectureware.vis.graphviz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GraphvizmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graphvizmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGraphsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGraphsGraphParserRuleCall_2_0 = (RuleCall)cGraphsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//graphvizmodel:
		//	"graphs" "{" graphs+=graph* "}";
		public ParserRule getRule() { return rule; }

		//"graphs" "{" graphs+=graph* "}"
		public Group getGroup() { return cGroup; }

		//"graphs"
		public Keyword getGraphsKeyword_0() { return cGraphsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//graphs+=graph*
		public Assignment getGraphsAssignment_2() { return cGraphsAssignment_2; }

		//graph
		public RuleCall getGraphsGraphParserRuleCall_2_0() { return cGraphsGraphParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class GraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "graph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGraphKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStrictAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cStrictStrictKeyword_1_0 = (Keyword)cStrictAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeGraphtypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameDOT_IDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStmtsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStmtsStmtParserRuleCall_5_0 = (RuleCall)cStmtsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//graph:
		//	"graph" strict?="strict"? type=graphtype name=DOT_ID? "{" stmts+=stmt* "}";
		public ParserRule getRule() { return rule; }

		//"graph" strict?="strict"? type=graphtype name=DOT_ID? "{" stmts+=stmt* "}"
		public Group getGroup() { return cGroup; }

		//"graph"
		public Keyword getGraphKeyword_0() { return cGraphKeyword_0; }

		//strict?="strict"?
		public Assignment getStrictAssignment_1() { return cStrictAssignment_1; }

		//"strict"
		public Keyword getStrictStrictKeyword_1_0() { return cStrictStrictKeyword_1_0; }

		//type=graphtype
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//graphtype
		public RuleCall getTypeGraphtypeEnumRuleCall_2_0() { return cTypeGraphtypeEnumRuleCall_2_0; }

		//name=DOT_ID?
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_3_0() { return cNameDOT_IDTerminalRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//stmts+=stmt*
		public Assignment getStmtsAssignment_5() { return cStmtsAssignment_5; }

		//stmt
		public RuleCall getStmtsStmtParserRuleCall_5_0() { return cStmtsStmtParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cEdge_stmt_nodeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cEdge_stmt_subgraphParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cNode_stmtParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cAttributeParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cAttr_stmtParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSubgraphParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//stmt:
		//	(edge_stmt_node | edge_stmt_subgraph | node_stmt | attribute | attr_stmt | subgraph) ";"?;
		public ParserRule getRule() { return rule; }

		//(edge_stmt_node | edge_stmt_subgraph | node_stmt | attribute | attr_stmt | subgraph) ";"?
		public Group getGroup() { return cGroup; }

		//edge_stmt_node | edge_stmt_subgraph | node_stmt | attribute | attr_stmt | subgraph
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//edge_stmt_node
		public RuleCall getEdge_stmt_nodeParserRuleCall_0_0() { return cEdge_stmt_nodeParserRuleCall_0_0; }

		//edge_stmt_subgraph
		public RuleCall getEdge_stmt_subgraphParserRuleCall_0_1() { return cEdge_stmt_subgraphParserRuleCall_0_1; }

		//node_stmt
		public RuleCall getNode_stmtParserRuleCall_0_2() { return cNode_stmtParserRuleCall_0_2; }

		//attribute
		public RuleCall getAttributeParserRuleCall_0_3() { return cAttributeParserRuleCall_0_3; }

		//attr_stmt
		public RuleCall getAttr_stmtParserRuleCall_0_4() { return cAttr_stmtParserRuleCall_0_4; }

		//subgraph
		public RuleCall getSubgraphParserRuleCall_0_5() { return cSubgraphParserRuleCall_0_5; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class Edge_stmt_nodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edge_stmt_node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNode_idAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNode_idNode_idParserRuleCall_0_0 = (RuleCall)cNode_idAssignment_0.eContents().get(0);
		private final Assignment cEdgeRHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeRHSEdgeRHSParserRuleCall_1_0 = (RuleCall)cEdgeRHSAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttr_listParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//edge_stmt_node:
		//	node_id=node_id edgeRHS+=edgeRHS+ attributes+=attr_list*;
		public ParserRule getRule() { return rule; }

		//node_id=node_id edgeRHS+=edgeRHS+ attributes+=attr_list*
		public Group getGroup() { return cGroup; }

		//node_id=node_id
		public Assignment getNode_idAssignment_0() { return cNode_idAssignment_0; }

		//node_id
		public RuleCall getNode_idNode_idParserRuleCall_0_0() { return cNode_idNode_idParserRuleCall_0_0; }

		//edgeRHS+=edgeRHS+
		public Assignment getEdgeRHSAssignment_1() { return cEdgeRHSAssignment_1; }

		//edgeRHS
		public RuleCall getEdgeRHSEdgeRHSParserRuleCall_1_0() { return cEdgeRHSEdgeRHSParserRuleCall_1_0; }

		//attributes+=attr_list*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//attr_list
		public RuleCall getAttributesAttr_listParserRuleCall_2_0() { return cAttributesAttr_listParserRuleCall_2_0; }
	}

	public class Edge_stmt_subgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edge_stmt_subgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubgraphAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubgraphSubgraphParserRuleCall_0_0 = (RuleCall)cSubgraphAssignment_0.eContents().get(0);
		private final Assignment cEdgeRHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeRHSEdgeRHSParserRuleCall_1_0 = (RuleCall)cEdgeRHSAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttr_listParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//edge_stmt_subgraph:
		//	subgraph=subgraph edgeRHS=edgeRHS+ attributes+=attr_list*;
		public ParserRule getRule() { return rule; }

		//subgraph=subgraph edgeRHS=edgeRHS+ attributes+=attr_list*
		public Group getGroup() { return cGroup; }

		//subgraph=subgraph
		public Assignment getSubgraphAssignment_0() { return cSubgraphAssignment_0; }

		//subgraph
		public RuleCall getSubgraphSubgraphParserRuleCall_0_0() { return cSubgraphSubgraphParserRuleCall_0_0; }

		//edgeRHS=edgeRHS+
		public Assignment getEdgeRHSAssignment_1() { return cEdgeRHSAssignment_1; }

		//edgeRHS
		public RuleCall getEdgeRHSEdgeRHSParserRuleCall_1_0() { return cEdgeRHSEdgeRHSParserRuleCall_1_0; }

		//attributes+=attr_list*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//attr_list
		public RuleCall getAttributesAttr_listParserRuleCall_2_0() { return cAttributesAttr_listParserRuleCall_2_0; }
	}

	public class Node_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "node_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttr_listParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//// TODO MV node_stmt  	:  name=DOT_ID (port=port)? (attributes+=attr_list)*;
		//node_stmt:
		//	name=DOT_ID attributes+=attr_list*;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID attributes+=attr_list*
		public Group getGroup() { return cGroup; }

		//name=DOT_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_0() { return cNameDOT_IDTerminalRuleCall_0_0; }

		//attributes+=attr_list*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//attr_list
		public RuleCall getAttributesAttr_listParserRuleCall_1_0() { return cAttributesAttr_listParserRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDOT_IDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//attribute:
		//	name=DOT_ID "=" value=DOT_ID;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID "=" value=DOT_ID
		public Group getGroup() { return cGroup; }

		//name=DOT_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_0() { return cNameDOT_IDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=DOT_ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//DOT_ID
		public RuleCall getValueDOT_IDTerminalRuleCall_2_0() { return cValueDOT_IDTerminalRuleCall_2_0; }
	}

	public class Attr_stmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "attr_stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributetypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttr_listParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//attr_stmt:
		//	type=attributetype attributes+=attr_list+;
		public ParserRule getRule() { return rule; }

		//type=attributetype attributes+=attr_list+
		public Group getGroup() { return cGroup; }

		//type=attributetype
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//attributetype
		public RuleCall getTypeAttributetypeEnumRuleCall_0_0() { return cTypeAttributetypeEnumRuleCall_0_0; }

		//attributes+=attr_list+
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//attr_list
		public RuleCall getAttributesAttr_listParserRuleCall_1_0() { return cAttributesAttr_listParserRuleCall_1_0; }
	}

	public class Attr_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "attr_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA_listAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA_listA_listParserRuleCall_1_0 = (RuleCall)cA_listAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//attr_list:
		//	"[" a_list+=a_list* "]";
		public ParserRule getRule() { return rule; }

		//"[" a_list+=a_list* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//a_list+=a_list*
		public Assignment getA_listAssignment_1() { return cA_listAssignment_1; }

		//a_list
		public RuleCall getA_listA_listParserRuleCall_1_0() { return cA_listA_listParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class A_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "a_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOT_IDTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//a_list:
		//	name=DOT_ID ("=" value=DOT_ID)? ","?;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID ("=" value=DOT_ID)? ","?
		public Group getGroup() { return cGroup; }

		//name=DOT_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_0() { return cNameDOT_IDTerminalRuleCall_0_0; }

		//("=" value=DOT_ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=DOT_ID
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DOT_ID
		public RuleCall getValueDOT_IDTerminalRuleCall_1_1_0() { return cValueDOT_IDTerminalRuleCall_1_1_0; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}

	public class SubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "subgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSubgraphKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtsStmtParserRuleCall_2_0 = (RuleCall)cStmtsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//subgraph:
		//	("subgraph" name=DOT_ID?)? "{" stmts+=stmt* "}";
		public ParserRule getRule() { return rule; }

		//("subgraph" name=DOT_ID?)? "{" stmts+=stmt* "}"
		public Group getGroup() { return cGroup; }

		//("subgraph" name=DOT_ID?)?
		public Group getGroup_0() { return cGroup_0; }

		//"subgraph"
		public Keyword getSubgraphKeyword_0_0() { return cSubgraphKeyword_0_0; }

		//name=DOT_ID?
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_1_0() { return cNameDOT_IDTerminalRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//stmts+=stmt*
		public Assignment getStmtsAssignment_2() { return cStmtsAssignment_2; }

		//stmt
		public RuleCall getStmtsStmtParserRuleCall_2_0() { return cStmtsStmtParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EdgeRHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edgeRHS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEdgeRHS_nodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEdgeRHS_subgraphParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO MV port : ":" name=DOT_ID ( ":" compass_pt=compass_pt )? | ":" compass_pt=compass_pt;
		////port : ":" name=DOT_ID ( ":" compass_pt=compass_pt )? | ":" compass_pt=compass_pt;
		//edgeRHS:
		//	edgeRHS_node | edgeRHS_subgraph;
		public ParserRule getRule() { return rule; }

		//edgeRHS_node | edgeRHS_subgraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//edgeRHS_node
		public RuleCall getEdgeRHS_nodeParserRuleCall_0() { return cEdgeRHS_nodeParserRuleCall_0; }

		//edgeRHS_subgraph
		public RuleCall getEdgeRHS_subgraphParserRuleCall_1() { return cEdgeRHS_subgraphParserRuleCall_1; }
	}

	public class EdgeRHS_nodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edgeRHS_node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpEdgeopEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNode_idParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		
		//edgeRHS_node:
		//	op=edgeop node=node_id;
		public ParserRule getRule() { return rule; }

		//op=edgeop node=node_id
		public Group getGroup() { return cGroup; }

		//op=edgeop
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//edgeop
		public RuleCall getOpEdgeopEnumRuleCall_0_0() { return cOpEdgeopEnumRuleCall_0_0; }

		//node=node_id
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }

		//node_id
		public RuleCall getNodeNode_idParserRuleCall_1_0() { return cNodeNode_idParserRuleCall_1_0; }
	}

	public class EdgeRHS_subgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edgeRHS_subgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpEdgeopEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cSubgraphAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubgraphSubgraphParserRuleCall_1_0 = (RuleCall)cSubgraphAssignment_1.eContents().get(0);
		
		//edgeRHS_subgraph:
		//	op=edgeop subgraph=subgraph;
		public ParserRule getRule() { return rule; }

		//op=edgeop subgraph=subgraph
		public Group getGroup() { return cGroup; }

		//op=edgeop
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//edgeop
		public RuleCall getOpEdgeopEnumRuleCall_0_0() { return cOpEdgeopEnumRuleCall_0_0; }

		//subgraph=subgraph
		public Assignment getSubgraphAssignment_1() { return cSubgraphAssignment_1; }

		//subgraph
		public RuleCall getSubgraphSubgraphParserRuleCall_1_0() { return cSubgraphSubgraphParserRuleCall_1_0; }
	}

	public class Node_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "node_id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// TODO MV  node_id  : name=DOT_ID (port=port)?;
		//node_id:
		//	name=DOT_ID;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0() { return cNameDOT_IDTerminalRuleCall_0; }
	}
	
	
	public class EdgeopElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edgeop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDirectedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDirectedHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cDirectedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUndirectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUndirectedHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cUndirectedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum edgeop:
		//	directed="->" | undirected="--";
		public EnumRule getRule() { return rule; }

		//directed="->" | undirected="--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//directed="->"
		public EnumLiteralDeclaration getDirectedEnumLiteralDeclaration_0() { return cDirectedEnumLiteralDeclaration_0; }

		//"->"
		public Keyword getDirectedHyphenMinusGreaterThanSignKeyword_0_0() { return cDirectedHyphenMinusGreaterThanSignKeyword_0_0; }

		//undirected="--"
		public EnumLiteralDeclaration getUndirectedEnumLiteralDeclaration_1() { return cUndirectedEnumLiteralDeclaration_1; }

		//"--"
		public Keyword getUndirectedHyphenMinusHyphenMinusKeyword_1_0() { return cUndirectedHyphenMinusHyphenMinusKeyword_1_0; }
	}

	public class GraphtypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "graphtype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDigraphEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDigraphDigraphKeyword_1_0 = (Keyword)cDigraphEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum graphtype:
		//	graph | digraph;
		public EnumRule getRule() { return rule; }

		//graph | digraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//digraph
		public EnumLiteralDeclaration getDigraphEnumLiteralDeclaration_1() { return cDigraphEnumLiteralDeclaration_1; }

		//"digraph"
		public Keyword getDigraphDigraphKeyword_1_0() { return cDigraphDigraphKeyword_1_0; }
	}

	public class AttributetypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "attributetype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNodeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNodeNodeKeyword_1_0 = (Keyword)cNodeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEdgeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEdgeEdgeKeyword_2_0 = (Keyword)cEdgeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum attributetype:
		//	graph | node | edge;
		public EnumRule getRule() { return rule; }

		//graph | node | edge
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//node
		public EnumLiteralDeclaration getNodeEnumLiteralDeclaration_1() { return cNodeEnumLiteralDeclaration_1; }

		//"node"
		public Keyword getNodeNodeKeyword_1_0() { return cNodeNodeKeyword_1_0; }

		//edge
		public EnumLiteralDeclaration getEdgeEnumLiteralDeclaration_2() { return cEdgeEnumLiteralDeclaration_2; }

		//"edge"
		public Keyword getEdgeEdgeKeyword_2_0() { return cEdgeEdgeKeyword_2_0; }
	}
	
	private GraphvizmodelElements pGraphvizmodel;
	private GraphElements pGraph;
	private StmtElements pStmt;
	private Edge_stmt_nodeElements pEdge_stmt_node;
	private Edge_stmt_subgraphElements pEdge_stmt_subgraph;
	private Node_stmtElements pNode_stmt;
	private AttributeElements pAttribute;
	private Attr_stmtElements pAttr_stmt;
	private Attr_listElements pAttr_list;
	private A_listElements pA_list;
	private SubgraphElements pSubgraph;
	private EdgeRHSElements pEdgeRHS;
	private EdgeRHS_nodeElements pEdgeRHS_node;
	private EdgeRHS_subgraphElements pEdgeRHS_subgraph;
	private Node_idElements pNode_id;
	private EdgeopElements unknownRuleEdgeop;
	private GraphtypeElements unknownRuleGraphtype;
	private AttributetypeElements unknownRuleAttributetype;
	private TerminalRule tDOT_ID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//graphvizmodel:
	//	"graphs" "{" graphs+=graph* "}";
	public GraphvizmodelElements getGraphvizmodelAccess() {
		return (pGraphvizmodel != null) ? pGraphvizmodel : (pGraphvizmodel = new GraphvizmodelElements());
	}
	
	public ParserRule getGraphvizmodelRule() {
		return getGraphvizmodelAccess().getRule();
	}

	//graph:
	//	"graph" strict?="strict"? type=graphtype name=DOT_ID? "{" stmts+=stmt* "}";
	public GraphElements getGraphAccess() {
		return (pGraph != null) ? pGraph : (pGraph = new GraphElements());
	}
	
	public ParserRule getGraphRule() {
		return getGraphAccess().getRule();
	}

	//stmt:
	//	(edge_stmt_node | edge_stmt_subgraph | node_stmt | attribute | attr_stmt | subgraph) ";"?;
	public StmtElements getStmtAccess() {
		return (pStmt != null) ? pStmt : (pStmt = new StmtElements());
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//edge_stmt_node:
	//	node_id=node_id edgeRHS+=edgeRHS+ attributes+=attr_list*;
	public Edge_stmt_nodeElements getEdge_stmt_nodeAccess() {
		return (pEdge_stmt_node != null) ? pEdge_stmt_node : (pEdge_stmt_node = new Edge_stmt_nodeElements());
	}
	
	public ParserRule getEdge_stmt_nodeRule() {
		return getEdge_stmt_nodeAccess().getRule();
	}

	//edge_stmt_subgraph:
	//	subgraph=subgraph edgeRHS=edgeRHS+ attributes+=attr_list*;
	public Edge_stmt_subgraphElements getEdge_stmt_subgraphAccess() {
		return (pEdge_stmt_subgraph != null) ? pEdge_stmt_subgraph : (pEdge_stmt_subgraph = new Edge_stmt_subgraphElements());
	}
	
	public ParserRule getEdge_stmt_subgraphRule() {
		return getEdge_stmt_subgraphAccess().getRule();
	}

	//// TODO MV node_stmt  	:  name=DOT_ID (port=port)? (attributes+=attr_list)*;
	//node_stmt:
	//	name=DOT_ID attributes+=attr_list*;
	public Node_stmtElements getNode_stmtAccess() {
		return (pNode_stmt != null) ? pNode_stmt : (pNode_stmt = new Node_stmtElements());
	}
	
	public ParserRule getNode_stmtRule() {
		return getNode_stmtAccess().getRule();
	}

	//attribute:
	//	name=DOT_ID "=" value=DOT_ID;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//attr_stmt:
	//	type=attributetype attributes+=attr_list+;
	public Attr_stmtElements getAttr_stmtAccess() {
		return (pAttr_stmt != null) ? pAttr_stmt : (pAttr_stmt = new Attr_stmtElements());
	}
	
	public ParserRule getAttr_stmtRule() {
		return getAttr_stmtAccess().getRule();
	}

	//attr_list:
	//	"[" a_list+=a_list* "]";
	public Attr_listElements getAttr_listAccess() {
		return (pAttr_list != null) ? pAttr_list : (pAttr_list = new Attr_listElements());
	}
	
	public ParserRule getAttr_listRule() {
		return getAttr_listAccess().getRule();
	}

	//a_list:
	//	name=DOT_ID ("=" value=DOT_ID)? ","?;
	public A_listElements getA_listAccess() {
		return (pA_list != null) ? pA_list : (pA_list = new A_listElements());
	}
	
	public ParserRule getA_listRule() {
		return getA_listAccess().getRule();
	}

	//subgraph:
	//	("subgraph" name=DOT_ID?)? "{" stmts+=stmt* "}";
	public SubgraphElements getSubgraphAccess() {
		return (pSubgraph != null) ? pSubgraph : (pSubgraph = new SubgraphElements());
	}
	
	public ParserRule getSubgraphRule() {
		return getSubgraphAccess().getRule();
	}

	//// TODO MV port : ":" name=DOT_ID ( ":" compass_pt=compass_pt )? | ":" compass_pt=compass_pt;
	////port : ":" name=DOT_ID ( ":" compass_pt=compass_pt )? | ":" compass_pt=compass_pt;
	//edgeRHS:
	//	edgeRHS_node | edgeRHS_subgraph;
	public EdgeRHSElements getEdgeRHSAccess() {
		return (pEdgeRHS != null) ? pEdgeRHS : (pEdgeRHS = new EdgeRHSElements());
	}
	
	public ParserRule getEdgeRHSRule() {
		return getEdgeRHSAccess().getRule();
	}

	//edgeRHS_node:
	//	op=edgeop node=node_id;
	public EdgeRHS_nodeElements getEdgeRHS_nodeAccess() {
		return (pEdgeRHS_node != null) ? pEdgeRHS_node : (pEdgeRHS_node = new EdgeRHS_nodeElements());
	}
	
	public ParserRule getEdgeRHS_nodeRule() {
		return getEdgeRHS_nodeAccess().getRule();
	}

	//edgeRHS_subgraph:
	//	op=edgeop subgraph=subgraph;
	public EdgeRHS_subgraphElements getEdgeRHS_subgraphAccess() {
		return (pEdgeRHS_subgraph != null) ? pEdgeRHS_subgraph : (pEdgeRHS_subgraph = new EdgeRHS_subgraphElements());
	}
	
	public ParserRule getEdgeRHS_subgraphRule() {
		return getEdgeRHS_subgraphAccess().getRule();
	}

	//// TODO MV  node_id  : name=DOT_ID (port=port)?;
	//node_id:
	//	name=DOT_ID;
	public Node_idElements getNode_idAccess() {
		return (pNode_id != null) ? pNode_id : (pNode_id = new Node_idElements());
	}
	
	public ParserRule getNode_idRule() {
		return getNode_idAccess().getRule();
	}

	//enum edgeop:
	//	directed="->" | undirected="--";
	public EdgeopElements getEdgeopAccess() {
		return (unknownRuleEdgeop != null) ? unknownRuleEdgeop : (unknownRuleEdgeop = new EdgeopElements());
	}
	
	public EnumRule getEdgeopRule() {
		return getEdgeopAccess().getRule();
	}

	//enum graphtype:
	//	graph | digraph;
	public GraphtypeElements getGraphtypeAccess() {
		return (unknownRuleGraphtype != null) ? unknownRuleGraphtype : (unknownRuleGraphtype = new GraphtypeElements());
	}
	
	public EnumRule getGraphtypeRule() {
		return getGraphtypeAccess().getRule();
	}

	//enum attributetype:
	//	graph | node | edge;
	public AttributetypeElements getAttributetypeAccess() {
		return (unknownRuleAttributetype != null) ? unknownRuleAttributetype : (unknownRuleAttributetype = new AttributetypeElements());
	}
	
	public EnumRule getAttributetypeRule() {
		return getAttributetypeAccess().getRule();
	}

	//// TODO enum compass_pt: north="n" | northeast="ne" | east="e" | southeast="se" | south="s" | southwest="sw" | west="w" | northwest="nw";
	//terminal DOT_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* | "\"" ("\\" ("b" | "t" | "n" | "f" | "r" |
	//	"\"" | "\'" | "\\") | !"\"")* "\"" | "-"? ("." "0".."9"+ | "0".."9"+ ("." "0".."9"*)?);
	public TerminalRule getDOT_IDRule() {
		return (tDOT_ID != null) ? tDOT_ID : (tDOT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT_ID"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
