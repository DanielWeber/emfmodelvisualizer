«IMPORT imp»

«EXTENSION dataimport::dsl::impUtil»

«DEFINE root FOR ImportSpec»
«FILE filename()»
import java.util.List;
import dataimport.platform.ImportError;


public class «classname()» extends dataimport.platform.DataImporterBase {

	protected void handleRoot( String current, List<String> rest) {
		String currentHeader = extractHeader( current ).trim();
		«FOREACH recordSection.recordHandlers AS r»
			if ( currentHeader.equals("«r.name»") ) «r.handlerMethodName()»( current, rest );
		«ENDFOREACH» 
	}
 
	«EXPAND recordHandlerMethod FOREACH recordSection.recordHandlers»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE datamappingMethod FOR RecordHandler»
	private void «datamappingMethodName()»( String current ) {
		«FOREACH instances AS i»
			// create new instance «i.name»:«i.type.name»
			env().add( "«i.name»",  new «i.type.classname()»() );
		«ENDFOREACH»
		
		«IF !fieldMappings.isEmpty»
			List<String> contents = extractFields(current);
			«FOREACH fieldMappings.instance.toSet() AS i»
				// set attributes for «i.name»:«i.type.name»
				«i.type.classname()» «i.name» = 
					((«i.type.classname()»)env().lookup("«i.name»"));
				«FOREACH fieldMappings.select(m|m.instance == i) AS m-»
					«m.instance.name».set«m.field.name.toFirstUpper()»( contents.get(«m.index-1») );
				«ENDFOREACH»
			«ENDFOREACH»
		«ENDIF»
		
		«FOREACH graphBuilds AS g»
			// building graph: «g.ownerInstance.name».«g.ownerRef.name» <- «g.targetInstance.name»
			((«g.ownerInstance.type.classname()»)env().lookup("«g.ownerInstance.name»")).
				«IF g.one»set«ELSE»add«ENDIF»«g.ownerRef.name.toFirstUpper()»( («g.targetInstance.type.classname()»)env().lookup("«g.targetInstance.name»") );
		«ENDFOREACH»
	}
«ENDDEFINE»

«DEFINE recordHandlerMethod FOR RecordHandler»
	private void «handlerMethodName()»( String current, List<String> rest) {
		// cross check that we can actually handle this line
		String currentHeader = extractHeader( current ).trim();
		if ( !currentHeader.equals("«name»") ) {
			throw new ImportError("don't know how to handle "+currentHeader+" in «recursiveName()»");
		}
		
		«datamappingMethodName()»( current );	
		
		«IF nextSteps.isEmpty && jump == null»
			// no further parsing alternatives; returning
			return;
		«ELSE»					
			while ( !rest.isEmpty() ) {
				String nextLine = rest.get(0);		
				String nextHeader = extractHeader( nextLine ).trim();
				«IF !nextSteps.isEmpty»
					if ( «FOREACH nextSteps AS s SEPARATOR "||"»( nextHeader.equals("«s.name»") )«ENDFOREACH» ) {
						// consume this line, because we know we can process it
						rest.remove(0);
						// we need a new environment for this call
						cloneAndPushEnv();
						«FOREACH nextSteps AS r»
							if ( nextHeader.equals("«r.name»") ) «r.handlerMethodName()»( nextLine, rest );
						«ENDFOREACH»
						// go back to old environment
						popEnv();
					} else {
						«EXPAND jumper»
					}
				«ELSE»
						«EXPAND jumper»
				«ENDIF»
			} 
		«ENDIF»
	}

	«EXPAND datamappingMethod»

	«EXPAND recordHandlerMethod FOREACH nextSteps»
«ENDDEFINE»


«DEFINE jumper FOR RecordHandler-»
	«IF jump != null»
		«jump.nextRecord.handlerMethodName()»( current, rest );					
	«ELSE»						
		return;
	«ENDIF»
«ENDDEFINE»
