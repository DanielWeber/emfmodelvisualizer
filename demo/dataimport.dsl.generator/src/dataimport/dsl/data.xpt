«IMPORT imp»

«EXTENSION dataimport::dsl::impUtil»

«DEFINE root FOR DataStructure»
«FILE filename()»
import java.util.List;
import java.util.ArrayList;
import dataimport.platform.DataBase;

public class «classname()» extends dataimport.platform.DataBase {
	«EXPAND properties»
	«EXPAND treePrinter»
}
«ENDFILE»	  
«ENDDEFINE»
 
«DEFINE properties FOR DataStructure»

	«FOREACH attributes AS a»
		private «a.type.javaType()» «a.name»;
	«ENDFOREACH»

	«FOREACH references AS r»
		«IF r.ismulti»
			private List<«r.type.fqClassname()»> «r.name»List = new ArrayList<«r.type.fqClassname()»>();
		«ELSE»
			private «r.type.fqClassname()» «r.name»;
		«ENDIF»
	«ENDFOREACH»

	«FOREACH attributes AS a»
		public void set«a.name.toFirstUpper()»( «a.type.javaType()» value ) {
			«EXPAND typeCheck("value") FOR a.type»
			«a.name» = value;
		}

		public «a.type.javaType()» get«a.name.toFirstUpper()»() {
			return «a.name»;
		}
	«ENDFOREACH»
	
	«FOREACH references AS r»
		«IF r.ismulti»
			public void add«r.name.toFirstUpper()»( «r.type.fqClassname()» value ) {
				«r.name»List.add( value );
			}
	
			public List<«r.type.fqClassname()»> get«r.name.toFirstUpper()»() {
				return «r.name»List;
			}
		«ELSE»
			public void set«r.name.toFirstUpper()»( «r.type.fqClassname()» value ) {
				«r.name» = value;
			}
	
			public «r.type.fqClassname()» get«r.name.toFirstUpper()»() {
				return «r.name»;
			}
		«ENDIF»
	«ENDFOREACH»

«ENDDEFINE»

«DEFINE treePrinter FOR DataStructure»
	public void printTree( String indent ) {
		System.out.println( indent+"«name» {" );
		«FOREACH attributes AS a»
			System.out.println( indent+"  «a.name»="+get«a.name.toFirstUpper()»() );
		«ENDFOREACH»
		«FOREACH references AS r»
			System.out.println( indent+"  «r.name»=" );
			«IF r.ismulti»
				for (DataBase d : get«r.name.toFirstUpper()»()) d.printTree(indent+"    ");
			«ELSE»
				get«r.name.toFirstUpper()»().printTree(indent+"    " );
			«ENDIF»
		«ENDFOREACH»
		System.out.println( indent+"}" );
		
	}
«ENDDEFINE»

«DEFINE typeCheck(String attributeName) FOR AttributeType»
	«ERROR "cannot happen"»
«ENDDEFINE»

«DEFINE typeCheck(String attributeName) FOR BooleanType»
«ENDDEFINE»

«DEFINE typeCheck(String attributeName) FOR IntType»
	«IF range != null»
		if ( «attributeName» < «range.min» || «attributeName» > «range.max» ) {
			throw new RuntimeException();
		}		
	«ENDIF»
«ENDDEFINE»

«DEFINE typeCheck(String attributeName) FOR StringType»
	
		int strlen = «attributeName».length();

«ENDDEFINE»



























