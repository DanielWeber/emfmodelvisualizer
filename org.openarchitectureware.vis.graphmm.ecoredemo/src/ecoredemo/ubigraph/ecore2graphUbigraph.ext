import ecore;
import graphmm;

extension graphmmlib;
 
Object top(EPackage p):
	toCollection(p); 

create GraphCollection toCollection( EPackage p ):
	graphs.add( toAssocGraph(p)) -> 
	graphs.add( toInheritGraph(p)) ->
	this;

create Graph toAssocGraph(EPackage p):
	setName( "assocAndAttr" ) ->
	setTopnode( p.toNode("ass") ) ->
	nodes.add( p.toNode("ass") ) ->
	nodes.addAll( p.eClassifiers.typeSelect(EClass).toNode("ass") ) ->
	edges.addAll( p.eClassifiers.typeSelect(EClass).toEdge("ass") ) ->
	edges.addAll( p.eClassifiers.typeSelect(EClass).eReferences.toEdge("ass") ) ->
	nodes.addAll( p.eClassifiers.typeSelect(EClass).eAttributes.toNode("ass") ) ->
	edges.addAll( p.eClassifiers.typeSelect(EClass).eAttributes.toEdge("ass") ) ->
	this;


create Graph toInheritGraph(EPackage p):
	setName( "inheritance" ) ->
	addLayoutHint( "zestlayout", "tree" ) ->
	setTopnode( p.toNode("i") ) ->
	nodes.add( p.toNode("i") ) ->
	nodes.addAll( p.eClassifiers.typeSelect(EClass).toNode("i") ) ->
	edges.addAll( p.eClassifiers.typeSelect(EClass).iterateSuperTypes("i") )	;
	
iterateSuperTypes(EClass c, Object tkn):
	let st = c.eSuperTypes:
		st.isEmpty 
			? {((EPackage)c.eContainer).toToplevelEdge(c, tkn)}
			: st.toInheritanceEdge(c, tkn);

create SimpleDirectedEdge toInheritanceEdge( EClass super, EClass sub, Object tkn ):
	setContainment(true) ->
	setSource( super.toNode(tkn) ) ->
	setTarget( sub.toNode(tkn) ) ->
	setDirection( DirectionEnum::directed );

create SimpleDirectedEdge toToplevelEdge( EPackage super, EClass sub, Object tkn ):
	setContainment(true) ->
	setSource( super.toNode(tkn) ) ->
	setTarget( sub.toNode(tkn) ) ->
	setDirection( DirectionEnum::directed );


create SimpleNode toNode( EPackage p, Object tkn ):
	setLabel( p.name ) ->
	setCategory("package") ->
	setShape(ShapeEnum::ubi_cube) ->
	setFillcolor( ColorEnum::white); 

create SimpleNode toNode( EClass cls, Object tkn ):
	setLabel( cls.name ) ->
	setShape(ShapeEnum::ubi_sphere) ->
	setFillcolor( cls.abstract ? ColorEnum::white : ColorEnum::lightGray ); 

create SimpleNode toNode( EAttribute attr, Object tkn ):
	setCategory( "attributes" ) ->
	setLabel( attr.name+": "+attr.eType.name ) ->
	setShape(ShapeEnum::ubi_octahedron) ->
	setFillcolor( ColorEnum::lightGreen ); 
	 
create SimpleDirectedEdge toEdge( EReference ref, Object tkn ):
	setLabel( ref.name ) ->
	setCategory("associations") ->
	setProxied( true ) ->
	setWeight( ref.containment ? 50 : 0 ) ->
	setWidth( ref.containment ? 2 : 1 ) -> 
	setSource( ((EClass)ref.eContainer).toNode(tkn) ) ->
	setTarget( ((EClass)ref.eType).toNode(tkn) ) ->
	setColor( ref.containment ? ColorEnum::black : ColorEnum::gray ) ->
	setDirection( DirectionEnum::directed );
	
create SimpleDirectedEdge toEdge( EAttribute a, Object tkn ):
	setCategory( "attributes" ) ->
	setContainment(true) ->
	setWeight( 100  ) ->
	setSource( ((EClass)a.eContainer).toNode(tkn) ) ->
	setTarget( a.toNode(tkn) );
	
create SimpleDirectedEdge toEdge( EClass c, Object tkn ):
	setCategory( "package" ) ->
	setContainment(true) ->
	setSource( ((EPackage)c.eContainer).toNode(tkn) ) ->
	setTarget( c.toNode(tkn) );
	
	