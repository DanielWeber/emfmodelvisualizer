import xtext;
import dot;

extension org::eclipse::xtend::util::stdlib::io;
extension org::openarchitectureware::vis::graphviz::dotlib;

create dot::graphvizmodel toDot(Grammar grammar, Boolean showUsedGrammars):
	addGraph( grammar.toGraph(showUsedGrammars, false) )
; 

create dot::graphvizmodel toDot(Grammar grammar, Boolean showUsedGrammars, Boolean sortRulesByName):
	addGraph( grammar.toGraph(showUsedGrammars, sortRulesByName))
; 
 
cached toGraph (Grammar grammar, Boolean showUsedGrammars, Boolean sortRulesByName) :
	grammar.mapToGraph()
		.setName(grammar.name+"Grammar")
		.addStatement(let a = new attribute: a.setName("rankdir") -> a.setValue("LR") -> a)	
		.addStatement (grammar.toSubgraph(showUsedGrammars, sortRulesByName))
;
		
cached toSubgraph (Grammar grammar, Boolean showUsedGrammars, Boolean sortRulesByName) :
	let g = grammar.mapToSubgraph() :	
		g.setName(grammar.name) ->
		g.setLabel(grammar.name) ->
		showUsedGrammars?g.addStatements (grammar.usedGrammars.toSubgraph (showUsedGrammars, sortRulesByName)):null ->
		(sortRulesByName?grammar.rules.sortBy(e|e.name):grammar.rules).processRule(g) ->
		g
;

cached processRule (AbstractRule rule, subgraph g) :
	//info(rule) ->
	let ruleGraph = rule.mapToSubgraph() :
		g.addStatement (ruleGraph) ->
		ruleGraph.setName (rule.name) ->
		ruleGraph.setLabel (rule.name) ->
		ruleGraph.addStatement (rule.toNode()) ->
		ruleGraph.setAttribute("style", "dotted") ->
		(let pair = rule.alternatives.processAbstractElement (ruleGraph) :
			ruleGraph.addStatement (toEdge (rule, pair.first())) ->
			(let p = point (rule) :
				ruleGraph.addStatement (p.toNode()) ->
				ruleGraph.addStatement (toEdge (pair.last(), p)))) 
;	
		
List[Object] processCardinality (List[Object] elements, String cardinality, subgraph g) :
	processCardinalityOptional(processCardinalityReturn (elements, cardinality, g), cardinality, g)
;
			
List[Object] processCardinalityReturn (List[Object] elements, String cardinality, subgraph g) :
	doesReturn (cardinality) ? 
		(let start = point (elements, "start") :
			(let end = point (elements, "end") :
				g.addStatement(start.toNode()) ->
				g.addStatement(end.toNode()) ->
				g.addStatement(toEdge (start, elements.first())) ->
				g.addStatement(toEdge (elements.last(), end)) ->
				g.addStatement(toEdge (end,start)) ->
				list (start,end)))
	 : 
	 	elements
;
	
List[Object] processCardinalityOptional (List[Object] elements, String cardinality, subgraph g) :
	isOptional (cardinality) ? 
		(let start = point (elements, "start") :
			(let end = point (elements, "end") :
				g.addStatement(start.toNode()) ->
				g.addStatement(end.toNode()) ->
				g.addStatement(toEdge (start, elements.first())) ->
				g.addStatement(toEdge (elements.last(), end)) ->
				g.addStatement(toEdge (start,end)) ->
				list (start,end)))
	 : 
	 	elements
;

cached List[Object] processAbstractElement (AbstractElement element, subgraph g) :
	g.addStatement(element.toNode()) ->
	processCardinality(list (element), element.cardinality, g)
;

cached List[Object] processAbstractElement (Group group, subgraph g) :
	processCardinality (group.elements.processElementList (g), group.cardinality, g)
;

cached List[Object] processElementList (List[AbstractElement] elements, subgraph g) :
	elements.size>0?
	(let start = processAbstractElement(elements.first(), g) :
		(start!=null?
			(let end = processElementList (elements.withoutFirst(), g) :
				(end!=null?g.addStatement (toEdge (start.last(), end.first())):null) ->
				list (start.first(), end!=null?end.last():start.last()))
		:
			processElementList (elements.withoutFirst(), g)))
	:
	null
;

cached List[Object] processAbstractElement (UnorderedGroup group, subgraph g) :
	processCardinality (group.elements.processElementList (g), group.cardinality, g)
;

cached List[Object] processAbstractElement (Assignment assignment, subgraph g) :
	processCardinality (processAbstractElement (assignment.terminal, g), assignment.cardinality, g)
;

cached List[Object] processAbstractElement (Alternatives alternatives, subgraph g) :
	processCardinality (innerProcessAltervatives (alternatives, g), alternatives.cardinality, g)
;

cached List[Object] innerProcessAltervatives (Alternatives alternatives, subgraph g) :
	(let startPoint = point (alternatives, "start") :
		g.addStatement (startPoint.toNode()) ->
		(let endPoint = point (alternatives, "end") :
			g.addStatement (endPoint.toNode()) ->
			alternatives.elements.forAll (e|(let element = e.processAbstractElement(g) :
				(e!=null?
					(g.addStatement (toEdge (startPoint, element.first())) ->
					g.addStatement (toEdge (element.last(), endPoint)))
				:
					null)) ->
				true) ->
			list(startPoint, endPoint)))
;

cached List[Object] processAbstractElement (AbstractNegatedToken element, subgraph g) :
 	g.addStatement(element.toNode()) ->
 	(let r = processAbstractElement (element.terminal, g) :
 		g.addStatement (toEdge (element, r.first())) ->
 		processCardinality (list (element, r.last()), element.cardinality, g))
;
	
// ignore Action elments
cached Object processAbstractElement (Action action, subgraph g) :
	null
;
	
// list helpers 

List[Object] list (Object start, Object end) :
	{start,end}.toList()
;

List[Object] list (Object start) :
	{start}.toList()
;

List[Object] list() :
	{}
;

// rules

cached toNode(AbstractRule rule) :
	rule.mapToNode()
		.setLabel (rule.name)
		.setShape("box")
		.setStyle("filled")
		.setFillColor (rule.getFillColor())
;

String getFillColor (AbstractRule rule) :
	"white"
;

String getFillColor (TerminalRule rule) :
	"grey"
;


cached point (Object ref) :
	new Object
;

cached point (Object ref, String uniqueToken) :
	new Object
;	    

// elements

cached toNode(Object element) :
	element.mapToNode()
		.setShape("point")
;

cached toNode(AbstractElement element) :
	element.mapToNode()
		.setLabel (dotString(element.getLabel()))
		.setShape("box")
		.setStyle("filled")
		.setupNode(element)
;

 String getLabel (NegatedToken element) :
	"!"
;

String getLabel (UntilToken element) :
	"->"
;

String getLabel (AbstractElement element) :
	info ("Unsupported element: "+element) ->
	"Unsupported element "
;

String getLabel (Keyword keyword) :
	keyword.value
;

String getLabel (Assignment assignment) :
	/*assignment.feature+assignment.operator+*/assignment.terminal.getLabel()
;

String getLabel (CrossReference cr) :
	cr.type.classifier.name
;

String getLabel (RuleCall ruleCall) :
	ruleCall.rule.name
;

String getLabel (CharacterRange range) :
	range.left.value + ".." + range.right.value
;

String getLabel (Wildcard wildcard) :
	"."
;

String getLabel (EnumLiteralDeclaration ld) :
	ld.literal.value
;

node_stmt setupNode (node_stmt node, AbstractElement element) :
	node.setFillColor("grey")
;

node_stmt setupNode (node_stmt node, Keyword element) :
	node.setFillColor("white")
;

node_stmt setupNode (node_stmt node, CharacterRange element) :
	node.setFillColor("white")
;

node_stmt setupNode (node_stmt node, AbstractNegatedToken element) :
	node.setFillColor("white")
;

node_stmt setupNode (node_stmt node, Wildcard element) :
	node.setFillColor("white")
;

node_stmt setupNode (node_stmt node, Assignment element) :
	node.setupNode (element.terminal)
;

node_stmt setupNode (node_stmt node, CrossReference element) :
	node.setFillColor("grey") //node.setStyle ("dashed")
;

node_stmt setupNode (node_stmt node, RuleCall element) :
	node.setFillColor("grey")
;
	
cached toEdge(Object start, Object end ):
	mapToDirectedEdge( start, end)
		.setArrowHead("normal")
		.setArrowTail( "none")				
		// the higher the weight, the shorter and straighter the edge
;

cached toCrossReferenceEdge(CrossReference cr, Object reference):
	mapToDirectedEdge( cr, reference)
		.setArrowHead("normal")
		.setArrowTail( "none")	
		.setStyle("dotted")		
		.setWeight( "1" )
;

cached toRuleCallEdge(RuleCall rc, AbstractRule rule):
	mapToDirectedEdge( rc, rule)
		.setArrowHead("normal")
		.setArrowTail( "none")	
		.setStyle("dashed")		
		.setWeight( "1" )
;

create Keyword toEnd (AbstractRule rule) :
	setValue("end")
;

Boolean isOptional (String cardinality) :
	(cardinality=="*" || cardinality=="?")
;

Boolean doesReturn (String cardinality) :
	(cardinality=="*" || cardinality=="+")
;